
/* --------------------------------------------------------------------
   Filename: /obj/soul.
   Creator: Padrone
   Last edit:  21.3.94 whisky uni-linz.ac.at for a better code 
   Comment: be careful this file is cloned in any player. Please,
			don't add new code just for fun.
   -------------------------------------------------------------------- */

static object pl; 
static string pn;

int get()
{
 
    pl = this_player();
    pn = pl->query_name();
    return 1;
}

int drop() 
{ 
  return 1; 
}

id(str) 
{ 
   return str == "soul"; 
}

void long() 
{
     write("It is transparent.\n");
}


void init() 
{
	get();
    add_action("fcn_me","me");
    add_action("applaud", "applaud");
    add_action("blush", "blush");
    add_action("bounce", "bounce");
    add_action("bow", "bow");
    add_action("burp", "burp");
    add_action("cackle", "cackle");
    add_action("chuckle", "chuckle");
    add_action("clap", "clap");
    add_action("comfort", "comfort");
    add_action("cough", "cough");
    add_action("cry", "cry");
    add_action("cuddle", "cuddle");
    add_action("curse", "curse");
    add_action("curtsey", "curtsey");
    add_action("dance", "dance");
    add_action("die","die");
    add_action("fart", "fart");
    add_action("flip", "flip");
    add_action("fondle", "fondle");
    add_action("french", "french");
    add_action("frown", "frown");
    add_action("gasp", "gasp");
    add_action("giggle", "giggle");
    add_action("glare", "glare");
    add_action("grin", "grin");
    add_action("groan", "groan");
    add_action("grope", "grope");
    add_action("growl", "growl");
    add_action("hiccup", "hiccup");
    add_action("hug", "hug");
    add_action("kick", "kick");
    add_action("kiss", "kiss");
    add_action("knee", "knee");
    add_action("laugh", "laugh");
    add_action("lick", "lick");
    add_action("love", "love");
    add_action("moan", "moan");
    add_action("mount","mount");
    add_action("nibble", "nibble");
    add_action("no", "no");
    add_action("nod", "nod");
    add_action("pinch","pinch");
    add_action("poke", "poke");
    add_action("pout", "pout");
    add_action("puke", "puke");
    add_action("purr", "purr");
    add_action("ruffle", "ruffle");
    add_action("scream", "scream");
    add_action("shake", "shake");
    add_action("shiver", "shiver");
    add_action("shrug", "shrug");
    add_action("sigh", "sigh");
    add_action("sing", "sing");
    add_action("slap", "slap");
    add_action("smirk", "smirk");
    add_action("smile", "smile");
    add_action("snap", "snap");
    add_action("sneeze", "sneeze");
    add_action("snicker", "snicker");
    add_action("sniff", "sniff");
    add_action("snore", "snore");
    add_action("snuggle", "snuggle");
    add_action("spit", "spit");
    add_action("squeeze", "squeeze");
    add_action("stare", "stare");
    add_action("strut", "strut");
    add_action("sulk", "sulk");
    add_action("thank", "thank");
    add_action("twiddle", "twiddle");
    add_action("wave", "wave");
    add_action("whistle", "whistle");
    add_action("wiggle", "wiggle");
    add_action("wink", "wink");
    add_action("yawn", "yawn");
}

/* -------------------------- applaud ------------------------------ */

static int applaud(string arg) 
{
    if (!stringp(arg))
	{
      write("You applaud wholeheartedly.\n");
      say(pn + " gives a round of applause.\n",pl);
      return 1;
    }
    write("You applaud "+arg+".\n");
    say(pn + " applouds "+arg+".\n",pl);
	return 1;
}

/* -------------------------- blush ------------------------------ */

static int blush(string arg) 
{
  if (!stringp(arg))
  {
    write("Your cheeks are burning.\n");
    say(pn + " blushes.\n",pl);
    return 1;
  }
    write("You blush "+arg+".\n");
    say(pn + " blushes "+arg+".\n",pl);
    return 1;
}

/* -------------------------- bounce ------------------------------ */
static int bounce(string arg) 
{
  if (!stringp(arg))
  {
    write("B O I N G !!\n");
    say(pn + " bounces around.\n",pl);
    return 1;
  }
    write("You bounce "+arg+".\n");
    say(pn + " bounces "+arg+".\n",pl);
    return 1;
}

/* -------------------------- bow ------------------------------ */

static int bow(string arg) 
{
    object who;

    if (!stringp(arg)) 
	{
    write("You bow to your audience.\n");
	say(pn + " bows gracefully.\n",pl);
	return 1;
    }
    who = present(arg, environment(pl));

    if (objectp(who) && living(who))
	{
       tell_object(who, pn + " bows before you.\n",pl);
       write("You bow to " + who->query_name() +".\n");
       say(pn + " bows to " + who->query_name() + ".\n", who, pl);
       return 1;
    }
    write("You bow "+arg+".\n");
	say(pn + " bows "+arg+".\n",pl);
	return 1;
}

/* -------------------------- burp ------------------------------ */

static int burp(string arg) 
{
  if (!stringp(arg))
  {
    write("Excuse yourself!\n");
    say(pn + " burps rudely.\n",pl);
    return 1;
  }
    write("You burp "+arg+".\n");
    say(pn + " burps "+arg+".\n",pl);
    return 1;
}

/* -------------------------- cackle ------------------------------ */

static int cackle(string arg) 
{
  if (!stringp(arg))
  {
    write("You cackle gleefully.\n");
    say(pn + " throws " + pl->query_possessive() +
	" head back and cackles with glee!\n",pl);
    return 1;
  }
    write("You cackle "+arg+".\n");
    say(pn + " cackles " +arg+".\n",pl);
    return 1;
}

/* -------------------------- chuckle ------------------------------ */

static int chuckle(string arg) 
{
   if (!stringp(arg))
   {
     write("You chuckle politely.\n");
     say(pn + " chuckles politely.\n",pl);
     return 1;
   }
   write("You chuckle "+arg+".\n");
   say(pn + " chuckles "+arg+".\n",pl);
   return 1;
}

/* -------------------------- clap ------------------------------ */

static int clap(string arg) 
{
  if (!stringp(arg))
  {
    write("You clap briefly.\n");
    say(pn + " claps briefly.\n",pl);
    return 1;
  }
   write("You clap "+arg+".\n");
   say(pn + " claps "+arg+".\n",pl);
   return 1;
}

/* -------------------------- comfort ------------------------------ */

static int comfort(string arg) 
{
    object who;

   if (stringp(arg))
       who = present(arg, environment(pl));

    if (stringp(arg) && (objectp(who)) && living(who))
	{
       tell_object(who, pn + " comforts you.\n");
       write("You comfort " + who->query_name() + ".\n");
       say(pn + " comforts " + who->query_name() + ".\n", who, pl);
       return 1;
    } 
    write("Comfort whom ?\n"); 
    return 1;
}

/* -------------------------- cough ------------------------------ */

static int cough(string arg) 
{
  if (!stringp(arg))
  {
    write("You cough noisily.\n");
    say(pn + " coughs noisily.\n",pl);
    return 1;
  }
  write("You cough "+arg+".\n");
  say(pn + " coughs "+arg+".\n",pl);
  return 1;
}

/* -------------------------- cry ------------------------------ */

static int cry(string arg) 
{
  if (!stringp(arg))
  {
    write("Waaaaah!\n");
    say(pn + " bursts into tears.\n",pl);
    return 1;
  }
  write("You cry "+arg+".\n");
  say(pn + " cries "+arg+".\n",pl);
  return 1;
}

/* -------------------------- cuddle ------------------------------ */

static int cuddle(string arg) 
{
    object who;
    string h1,h2;

  if (stringp(arg))
  {
	if (sscanf(arg,"%s %s",h1,h2))
        who = present(h1, environment(pl));
    else 
        who = present(arg, environment(pl));

   if (objectp(who) && living(who))
   {
	  if (stringp(h2))
	  {
        tell_object(who, pn + " "+h2+" cuddles you.\n");
        write("You "+h2+" cuddle " + who->query_name() + ".\n");
        say(pn + " "+h2+" cuddles " + who->query_name() + ".\n", who, pl);
        return 1;
      }
     tell_object(who, pn + " cuddles you.\n");
     write("You cuddle " + who->query_name() + ".\n");
     say(pn + " cuddles " + who->query_name() + ".\n", who, pl);
    return 1;
   }
  } 
  write("Cuddle whom ?\n");
  return 1;
}

/* -------------------------- curse ------------------------------ */

static int curse(string arg) 
{
  if (!stringp(arg))
  {
     write("You swear loudly for a long time.\n");
     say(pn + " swears: #@*\"*&^$%@*&! !!!!!\n",pl);
     return 1;
  }
    write("You curse "+arg+".\n");
    say(pn + " curses "+arg+".\n",pl);
    return 1;
}

/* -------------------------- curtsey ------------------------------ */

static int curtsey(string arg) 
{
  if (!stringp(arg))
  {
    write("You curtsey gracefully.\n");
    say(pn + " curtseys gracefully.\n",pl);
    return 1;
  }
  write("You curtsey "+arg+".\n");
  say(pn + " curtseys "+arg+".\n",pl);
  return 1;
}

/* -------------------------- dance ------------------------------ */

static int dance(string arg) 
{
    object who;

    if (stringp(arg))
    who = present(arg, environment(pl));

    if (objectp(who) && living(who))
	{
       tell_object(who, pn + " sweeps you across the dance floor.\n");
       write("You sweep " + who->query_name() +" across the dance floor.\n");
       say(pn + " sweeps " + who->query_name() + 
		" across the dance floor.\n", who);
       return 1;
    }
    write("Feels silly, doesn't it?\n");
	say(pn + " does the disco duck.\n",pl);
	return 1;
}

/* -------------------------- die ------------------------------ */

static int die() 
{
   write("You fall down, acting dead.\n");
   say(pn + " rolls over and does " + 
	   pl->query_possessive() +" best to look dead.\n",pl);
   return 1;
}

/* -------------------------- fart ------------------------------ */

static int fart(string arg) 
{
  if (!stringp(arg))
  {
    write("How rude!\n");
    say(pn + " lets off a real rip-roarer.\n",pl);
    return 1;
  }
  write("You fart "+arg+".\n");
  say(pn + " farts "+arg+".\n",pl);
  return 1;
}

/* -------------------------- flip ------------------------------ */

static int flip() 
{
    write("You flip head over heels.\n");
    say(pn + " flips head over heels.\n",pl);
    return 1;
}

/* -------------------------- fondle ------------------------------ */

static int fondle(string arg) 
{
    object who;

    who = present(arg, environment(pl));

    if (stringp(arg) && objectp(who) && living(who))
	{
       tell_object(who, pn + " fondles you tenderly.\n");
       write("You fondle " + who->query_name() + ".\n");
       say(pn + " fondles " + who->query_name() + ".\n", who,pl);
       return 1;
    }
	write("Fondle whom ?\n");
	return 1;
}

/* -------------------------- french ------------------------------ */

static int french(string arg) 
{
  object who;

  who = present(arg, environment(pl));

  if (stringp(arg) && objectp(who) && living(who))
  {
    tell_object(who, pn +
       " gives you a deep and passionate kiss..it seems to take forever...\n");
    write("You give " + who->query_name() + 
		  " a REAL kiss..it lasts a long time...\n");
    say(pn + " gives " + who->query_name() +
       " a deep and passionate kiss..it seems to take forever...\n", who,pl);
    return 1;
  }
  write("French whom ?\n");
  return 1;
}

/* -------------------------- frown ------------------------------ */

static int frown(string arg) 
{
  if (!stringp(arg))
  {
    write("Is something wrong?\n");
    say(pn + " frowns.\n",pl);
    return 1;
  }
  write("You frown "+arg+"\n");
  say(pn + " frowns "+arg+".\n",pl);
  return 1;
}

/* -------------------------- gasp ------------------------------ */

static int gasp() 
{
    write("You gasp in astonishment.\n");
    say(pn + " gasps in astonishment!\n",pl);
    return 1;
}

/* -------------------------- giggle ------------------------------ */

static int giggle(string arg) 
{
  if (!stringp(arg))
  {
    write("You giggle inanely.\n");
    say(pn + " giggles inanely.\n",pl);
    return 1;
  }
  write("You giggle "+arg+".\n");
  say(pn + " giggles "+arg+".\n",pl);
  return 1;
}

/* -------------------------- glare ------------------------------ */

static int glare(string arg) 
{
    object who;

   if (stringp(arg))
    who = present(arg, environment(pl));

	if (stringp(arg) && objectp(who) && living(who))
	{
       tell_object(who, pn + " glares at you.\n",pl);
       write("You glare stonily at " + who->query_name() + ".\n");
       say(pn + " glares at " + who->query_name() + ".\n", who,pl);
       return 1;
    }
	write("Glare at whom ?\n");
	return 1;
}

/* -------------------------- grin ------------------------------ */

static int grin(string arg) 
{
  if (!stringp(arg))
  {
    write("You grin evilly.\n");
    say(pn + " grins evilly.\n",pl);
    return 1;
  }
  write("You grin "+arg+".\n");
  say(pn + " grins "+arg+".\n",pl);
  return 1;
}

/* -------------------------- groan ------------------------------ */

static int groan(string arg) 
{
  if (!stringp(arg))
  {
    write("You groan loudly.\n");
    say(pn + " groans loudly.\n",pl);
    return 1;
  }
  write("You groan "+arg+".\n");
  say(pn + " groans "+arg+".\n",pl);
  return 1;
}

/* -------------------------- grope ------------------------------ */

static int grope(string arg) 
{
    object who;

    who = present(arg, environment(pl));
   
    if (stringp(arg) && objectp(who) && living(who))
	{
       tell_object(who, pn + " gropes you lustfully.\n");
       write("You lustfully grope "+who->query_name()+".\n");
       say(pn + " lustfully gropes " + who->query_name() + ".\n", who,pl);
       return 1;
    }
	write("Grope whom ?\n");
	return 1;
}

/* -------------------------- growl ------------------------------ */

static int growl(string arg) 
{
    object who;

    if (!stringp(arg)) 
	{
       write("You growl.\n");
       say(pn + " growls.\n",pl);
	   return 1;
    }
    who = present(arg, environment(pl));

	if (objectp(who) && living(who))
	{
       tell_object(who, pn + " growls at you.\n");
       write("You growl at " + who->query_name() +".\n");
       say(pn + " growls at " + who->query_name() + ".\n", who);
       return 1;
    }
	write("You growl "+arg+".\n");
	say(pn +" growls "+arg+".\n");
	return 1;
}

/* -------------------------- hiccup ------------------------------ */

static int hiccup() 
{
    write("Hic!\n");
    say(pn + " hiccups.\n",pl);
    return 1;
}

/* ------------------------- hug ------------------------------ */

static int hug(string arg) 
{
    object who;
	string h1,h2;

  if (stringp(arg))
  {
	  if (sscanf(arg,"%s %s",h1,h2))
         who = present(h1, environment(pl));
      else 
         who = present(arg, environment(pl));

	if (objectp(who) && living(who))
	{
	  if (stringp(h2))
	  {
         tell_object(who, pn + " "+h2+" hugs you.\n");
         write("You "+h2+" hug " + who->query_name() + ".\n");
         say(pn + " "+h2+" hugs " + who->query_name() + ".\n", who);
         return 1;
       }
       tell_object(who, pn + " hugs you.\n");
       write("You hug " + who->query_name() + ".\n");
       say(pn + " hugs " + who->query_name() + ".\n", who);
	   return 1;
    }
  }
  write("Hug whom ?\n");
  return 1;
}

/* -------------------------- kick ------------------------------ */

static int kick(string arg) 
{
    object who;

  if (stringp(arg))
    who = present(arg, environment(pl));

	if (stringp(arg) && objectp(who))
	{
	  if (living(who))
          tell_object(who, pn + " kicks you.   OUCH!!\n");
       say(pn + " kicks " + who->query_name() + ".\n", who,pl);
       write("You kick " + who->query_name() + ".\n");
       return 1;
    }
	write("Kick whom ?\n");
	return 1;
}

/* -------------------------- kiss ------------------------------ */

static int kiss(string arg) 
{
    object who;
	string h1,h2;

  if (stringp(arg))
  {
	if (sscanf(arg,"%s %s",h1,h2)==2)
        who = present(h1, environment(pl));
    else 
		who = present(arg,environment(pl));

    if (objectp(who) && living(who))
	{
      if (stringp(h2))
	  {
          tell_object(who,pn +" "+h2+" kisses you.\n");
          say(pn + " "+h2+" kisses " + who->query_name() + ".\n", who,pl);
          write("You "+h2+" kiss " + who->query_name() + ".\n");
      } else  
	  {
          tell_object(who, pn + " kisses you.\n");
          say(pn + " kisses " + who->query_name() + ".\n", who,pl);
          write("You kiss " + who->query_name() + ".\n");
      }

      if (who->query_frog()) 
	  {
	     call_other(pl, "frog_curse", 1);
	     call_other(who, "frog_curse", 0);
      }
	  return 1;
    }  /* endif objectp */
  }  /* endif stringp */
  write("Kiss whom ?\n");
  return 1;
}

/* -------------------------- knee ------------------------------ */

static int knee(string arg) 
{
    object who;

   if (stringp(arg))
    who = present(arg, environment(pl));

 if (stringp(arg) && objectp(who) && living(who))
 {
   if (who->query_male()) 
  {
	tell_object(who, pl + " hits you with " +
		    pl->query_possessive() + " knee below your belt!\n" +
		    "You double over and fall to the ground, writhing in " +
		    "excruciating pain,\nfeeling like you may throw up " +
		    "everything you have eaten!\n");
	say(pn + " suddenly raises " + pl->query_possessive() +
	    " knee, sending " + who->query_name() + 
		" to the floor, writhing in pain!\n",who,pl);
	write("You hit " + who->query_name() + " with your knee.\n");
	return 1;
  }
  else {
	tell_object(who, pn + 
		 " tries to knee you below your belt, without much effect.\n");
	say(pn + " tries to knee " + arg + ", without much effect.\n", who,pl);
	write("You try to knee " + arg + ". Not very effective though.\n");
	return 1;
  }
 }
 write("Knee whom ?\n");
 return 1;
}


/* -------------------------- laugh ------------------------------ */

static int laugh(string arg) 
{
  if (!stringp(arg))
  {
    write("You fall down laughing.\n");
    say(pn + " falls down laughing.\n");
    return 1;
  }
  write("You laugh "+arg+".\n");
  say(pn + " laughs "+arg+".\n");
  return 1;
}

/* -------------------------- lick ------------------------------ */

static int lick(string arg) 
{
    object who;
	string h1,h2;

  if (stringp(arg))
  {
	if (sscanf(arg,"%s %s",h1,h2)==2)
        who = present(h1, environment(pl));
    else 
		who = present(arg,environment(pl));

    if (objectp(who) && living(who))
	{
      if (stringp(h2))
	  {
          tell_object(who,pn +" "+h2+" licks you.\n");
          say(pn + " "+h2+" licks " + who->query_name() + ".\n", who,pl);
          write("You "+h2+" lick " + who->query_name() + ".\n");
		  return 1;
      }  
      tell_object(who, pn + " licks you.\n");
      say(pn + " licks " + who->query_name() + ".\n", who,pl);
      write("You lick " + who->query_name() + ".\n");
	  return 1;
    }  
  } 
  write("Lick whom ?\n");
  return 1;
}

/* -------------------------- love ------------------------------ */

static int love(string arg) 
{
    object who;

  if (stringp(arg))
    who = present(arg, environment(pl));

    if (stringp(arg) && objectp(who) && living(who))
	{
       tell_object(who, pn + " whispers to you sweet words of love.\n");
       say(pn + " whispers softly to " + who->query_name() + ".\n", who);
       write("You tell your true feelings to " + who->query_name() + ".\n");
       return 1;
    }
	write("Love whom ?\n");
	return 1;
}

/* -------------------------- moan ------------------------------ */

static int moan(string arg) 
{
  if (!stringp(arg))
  {
    write("You start to moan.\n");
    say(pn + " starts moaning.\n",pl);
    return 1;
  }
  write("You moan "+arg+".\n");
  say(pn + " moans "+arg+".\n",pl);
  return 1;
}

/* -------------------------- mount ------------------------------ */

static int mount(string arg) 
{
   object who;

  if (stringp(arg))
   who = present(arg, environment(pl));

   if (stringp(arg) && objectp(who) && living(who))
   {
      tell_object(who,pn+" mounts you and rides off into the sunset.\n");
      write("You mount "+who->short()+" and ride off into the sunset.\n");
      say(pn+" mounts "+who->short()+
	  " and rides off into the sunset.\n",who,pl);
      return 1;
   }
   write("Mount whom ?\n");
   return 1;
}
  
/* -------------------------- nibble ------------------------------ */

static int nibble(string arg) 
{
    object who;

   if (stringp(arg))
    who = present(arg, environment(pl));

	if (stringp(arg) && objectp(who) && living(who))
	{
       tell_object(who, pn + " nibbles on your ear.\n");
       say(pn + " nibbles on " + who->query_name() + "s ear.\n", who,pl);
       write("You nibble " + who->query_name() + "s ear.\n");
       return 1;
    }
	write("Nibble whom ?\n");
	return 1;
}

/* -------------------------- no ------------------------------ */

static int no() 
{
    write("You shake your head no.\n");
    say(pn + " shakes "+pl->query_possessiv()+" head no.\n",pl);
    return 1;
}

/* -------------------------- nod ------------------------------ */

static int nod(string arg) 
{
  if (!stringp(arg))
  {
    write("You nod solemnly.\n");
    say(pn + " nods solemnly.\n",pl);
    return 1;
  }
  write("You nod "+arg+".\n");
  say(pn +" nods "+arg+".\n",pl);
  return 1;
}

/* -------------------------- poke ------------------------------ */

static int poke(string arg) 
{
    object who;

  if (stringp(arg))
    who = present(arg, environment(pl));

	if (stringp(arg) && objectp(who) && living(who))
	{
       tell_object(who, pn + " pokes you in the ribs.\n");
       say(pn + " pokes " + who->query_name() + " in the ribs.\n", who,pl);
       write("You poke " + who->query_name() + " in the ribs.\n");
       return 1;
    }
	write("Poke whom ?\n");
	return 1;
}

/* -------------------------- pout ------------------------------ */

static int pout(string arg) 
{
  if (!stringp(arg))
  {
    write("Ah, don't take it so hard.\n");
    say(pn + " pouts.\n",pl);
    return 1;
  }
  write("You pout "+arg+".\n");
  say(pn + " pouts "+arg+".\n",pl);
  return 1;
}

/* -------------------------- puke ------------------------------ */

static int puke(string arg) 
{
    object who;

    if(!stringp(arg)) 
	{
        write("You puke on your shoes.\n");
        say(pn + " doubles over and puke.\n");
        return 1;
    }
    who = present(arg, environment(pl));

	if (stringp(arg) && objectp(who) && living(who))
	{
       tell_object(who, pn + " pukes all over you!\n");
       write("You puke on "+who->query_name()+".\n");
       say(pn + " pukes on " + who->query_name() + ".\n", who);
       return 1;
    }
	write("Puke over whom ?\n");
	return 1;
}

/* -------------------------- purr ------------------------------ */

static int purr(string arg) 
{
  if (!stringp(arg))
  {
    write("MMMMEEEEEEEEOOOOOOOWWWWWWW!\n");
    say(pn + " purrs contentedly.\n",pl);
    return 1;
  }
  write("You purr "+arg+".\n");
  say(pn + " purrs "+arg+".\n",pl);
  return 1;
}

/* -------------------------- ruffle ------------------------------ */

static int ruffle(string arg) 
{
    object who;

 if (stringp(arg))
 {
    who = present(arg, environment(pl));

	if (objectp(who) && living(who))
	{
      tell_object(who, pn + " ruffles your hair playfully.\n");
      write("You ruffle " + who->query_name() + "s hair playfully.\n");
      say(pn + " ruffles " + who->query_name() + "s hair playfully.\n", who,pl);
      return 1;
    }
  }
  write("Ruffle whom ?\n");
  return 1;
}

/* -------------------------- scream ------------------------------ */

static int scream() 
{
    write("ARRGGGGGGHHHHHH!!!!\n");
    say(pn + " screams loudly!\n",pl);
    return 1;
}

/* -------------------------- shake ------------------------------ */

static int shake(string arg) 
{
    object who;

    if(!stringp(arg)) 
	{
        write("You're shaking in your boots.\n");
        say(pn + " shakes and quivers like a bowlful of jelly.\n",pl);
        return 1;
    }
    who = present(arg, environment(pl));

	if (objectp(who) && living(who))
	{
       tell_object(who, pn + " shakes your hand.\n");
       write("You shake hands with " + who->query_name() +".\n");
       say(pn + " shakes " + who->query_name() + "s hand.\n", who);
       return 1;
    }
  write("Shake whom ?\n");
  return 1;
 }

/* -------------------------- shiver ------------------------------ */

static int shiver() 
{
    write("Brrrrrr!!!\n");
    say(pn + " shivers from the cold.\n",pl);
    return 1;
}

/* -------------------------- shrug ------------------------------ */

static int shrug(string arg) 
{
  if (!stringp(arg))
  {
    write("You shrug helplessly.\n");
    say(pn + " shrugs helplessly.\n",pl);
    return 1;
  }
  write("You shrug "+arg+".\n");
  say(pn + " shrugs "+arg+".\n",pl);
  return 1;
}

/* -------------------------- sigh ------------------------------ */

static int sigh(string arg) 
{
  if (!stringp(arg))
  {
    write("You sigh deeply.\n");
    say(pn + " sighs deeply.\n",pl);
    return 1;
  }
  write("You sigh "+arg+".\n");
  say(pn + " sighs "+arg+".\n",pl);
  return 1;
}

/* -------------------------- sing ------------------------------ */

static int sing(string arg) 
{
  if (!stringp(arg))
  {
    write("Oh sole mio!\n");
    say(pn + " sings in Italian.\n");
    return 1;
  }
  write("You sing "+arg+".\n");
  say(pn + " sings "+arg+".\n");
  return 1;
 }

/* -------------------------- slap ------------------------------ */

static int slap(string arg) 
{
    object who;

  if (stringp(arg))
  {
     who = present(arg, environment(pl));

   if (objectp(who) && living(who))
   {
      write("You slap " + who->query_name() + ".\n");
      say(pn + " slaps " + who->query_name() + ".\n", who);
      tell_object(who, pn + " slaps you!\n");
      return 1;
   }
  }
  write("Slap whom ?\n");
  return 1;
 }

/* -------------------------- smirk ------------------------------ */

static int smirk() 
{
    write("You smirk.\n");
    say(pn + " smirks.\n");
    return 1;
}

/* -------------------------- smile ------------------------------ */

static int smile(string arg) 
{
    object who;
	string h1,h2;

	if (!stringp(arg))
	{
      write("You smile happily.\n");
      say(pn + " smiles happily.\n",pl);
      return 1;
    } 

   if (sscanf(arg,"%s %s",h1,h2)==2)
          who = present(h1, environment(pl));
   else 
         who = present(arg, environment(pl));

   if (objectp(who) && living(who))
  {
	if (stringp(h2))
	{
      tell_object(who, pn + " "+h2+" smiles at you.\n",pl);
      write("You "+h2+" smile at " + who->query_name() +".\n");
      say(pn + " "+h2+" smiles at " + who->query_name() + ".\n", who,pl);
      return 1;
    }
    tell_object(who, pn + " smiles at you.\n",pl);
    write("You smile at " + who->query_name() +".\n");
    say(pn + " smiles at " + who->query_name() + ".\n", who,pl);
    return 1;
   }
   write("You smile "+arg+".\n");
   say(pn + " smiles "+arg+".\n",pl);
   return 1;
 }

/* -------------------------- snap ------------------------------ */

static int snap() 
{
    write("You snap your fingers.\n");
    say(pn + " snaps " + pl->query_possessive() +
	" fingers.\n",pl);
    return 1;
}

/* -------------------------- sneeze ------------------------------ */

static int sneeze() 
{
    write("Gazundheit!\n");
    say(pn + " sneezes.\n",pl);
    return 1;
}

/* -------------------------- snicker ------------------------------ */

static int snicker(string arg) 
{
  if (!stringp(arg))
  {
    write("You snicker.\n");
    say(pn + " snickers.\n",pl);
    return 1;
  }
  write("You snicker "+arg+".\n");
  say(pn + " snickers "+arg+".\n",pl);
  return 1;
}

/* -------------------------- sniff ------------------------------ */

static int sniff() 
{
    write("You sniff sadly.\n");
    say(pn + " sniffs sadly.\n",pl);
    return 1;
}

/* -------------------------- snore ------------------------------ */

static int snore() 
{
    write("Zzzzzzzzzz...\n");
    say(pn + " snores loudly.\n",pl);
    return 1;
}

/* -------------------------- snuggle ------------------------------ */

static int snuggle(string arg) 
{
    object who;
	string h1,h2;


	if (stringp(arg))
	{
	  if (sscanf(arg,"%s %s",h1,h2)==2)
         who = present(h1, environment(pl));
      else
         who = present(arg, environment(pl));

      if (objectp(who) && living(who))
	  {
	   if (stringp(h2))
	   {
         write("You "+h2+" snuggle " + who->query_name() + ".\n");
         say(pn + " "+h2+" snuggles up to "+who->query_name() + ".\n", who,pl);
         tell_object(who, pn + " "+h2+" snuggles up to you.\n");
         return 1;
       }
       write("You snuggle " + who->query_name() + ".\n");
       say(pn + " snuggles up to " + who->query_name() + ".\n", who,pl);
       tell_object(who, pn + " snuggles up to you.\n");
       return 1;
      }
    }
  write("Snuggle whom ?\n");
  return 1;
}

/* -------------------------- spit ------------------------------ */

static int spit(string arg) 
{
    object who;

    if(!stringp(arg)) 
	{
        write("You spit on the ground.\n");
        say(pn + " spits on the ground.\n");
        return 1;
    }
    who = present(arg, environment(pl));

   if (objectp(who) && living(who))
   {
      tell_object(who, pn + " spits on you!\n");
      write("You spit on " + who->query_name() +".\n");
      say(pn + " spits on " + who->query_name() + ".\n", who);
      return 1;
   }
  write("Spit on whom ?\n");
  return 1;
}

/* -------------------------- squeeze ------------------------------ */

static int squeeze(string arg) 
{
    object who;
	string h1,h2;

   if (stringp(arg))
   {
	 if (sscanf(arg,"%s %s",h1,h2)==2)
        who = present(h1, environment(this_player()));
     else 
       who = present(arg, environment(this_player()));

	if (objectp(who) && living(who))
	{
	  if (stringp(h2))
	  {
       write("You "+h2+" squeeze " + who->query_name()+".\n");
       say(pn +" "+h2+" squeezes " + who->query_name()+".\n", who,pl);
       tell_object(who, pn + " "+h2+" squeezes you.\n");
       return 1;
      }
     write("You squeeze " + who->query_name()+".\n");
     say(pn +" squeezes " + who->query_name()+".\n", who,pl);
     tell_object(who, pn + " squeezes you.\n");
     return 1;
   }
  }
  write("Squeeze whom ?\n");
  return 1;
 }

/* -------------------------- stare ------------------------------ */

static int stare(string arg) 
{
    object who;

    if(!stringp(arg)) 
	{
        write("You stare into space.\n");
        say(pn + " stares into space.\n",pl);
        return 1;
    }
    who = present(arg, environment(pl));

	if (objectp(who) && living(who))
	{
       tell_object(who, pn + " stares deep into your eyes.\n",pl);
       write("You stare dreamily at " + who->query_name() +".\n");
       say(pn + " stares dreamily at " + who->query_name() + ".\n", who,pl);
       return 1;
    }
  write("Stare at whom ?\n");
  return 1;
}

/* -------------------------- strut ------------------------------ */

static int strut(string arg) 
{
  if (!stringp(arg))
  {
    write("Strut your stuff!\n");
    say(pn + " struts proudly.\n",pl);
    return 1;
  }
  write("You strut "+arg+".\n");
  say(pn + " struts "+arg+".\n",pl);
  return 1;
}

/* -------------------------- sulk ------------------------------ */

static int sulk(string arg) 
{
  if (!stringp(arg))
  {
    write("You sulk.\n");
    say(pn + " sulks in the corner.\n",pl);
    return 1;
  }
  write("You sulk "+arg+".\n");
  say(pn + " sulks "+arg+".\n",pl);
  return 1;
}

/* -------------------------- thank ------------------------------ */

static int thank(string arg) 
{
    object who;
    string h1,h2;

	if (stringp(arg))
	{
	  if (sscanf(arg,"%s %s",h1,h2) == 2)
         who = present(h1, environment(pl));
      else 
         who = present(arg, environment(pl));

	 if (objectp(who) && living(who))
	 {
	   if (stringp(h2))
	   {
        write("You "+h2+" thank " + who->query_name() + ".\n");
        say(pn + " "+h2+" thanks " + who->query_name() + ".\n", who);
        tell_object(who, pn + " "+h2+" thanks you.\n");
        return 1;
        }
      write("You thank " + who->query_name() + ".\n");
      say(pn + " thanks " + who->query_name() + ".\n", who);
      tell_object(who, pn + " thanks you.\n");
      return 1;
 	}
   }
  write("Thank whom ?\n");
  return 1;
}

/* -------------------------- twiddle ------------------------------ */

static int twiddle(string arg) 
{
  if (!stringp(arg))
  {
    write("You twiddle your thumbs.\n");
    say(pn + " twiddles " + pl->query_possessive() +
	" thumbs.\n",pl);
    return 1;
  }
  write("You "+arg+" twiddle your thumbs.\n");
  say(pn + " "+arg+" twiddles " + pl->query_possessive() +
  " thumbs.\n",pl);
  return 1;
}

/* -------------------------- wave ------------------------------ */

static int wave(string arg) 
{
  object who;
  string h1,h2;

  if (stringp(arg))
  {
	if (sscanf(arg,"%s %s",h1,h2))
		who = present(h1,environment(pl));
    else 
		who = present(arg,environment(pl));

	if (objectp(who) && living(who))
	{
	  if (stringp(h2))
	  {
        write("You "+h2+" wave at " + who->query_name() + ".\n");
        say(pn + " "+h2+" waves at " + who->query_name() + ".\n", who);
        tell_object(who, pn + " waves "+h2+" at you.\n");
        return 1;
      }
      write("You wave at " + who->query_name() + ".\n");
      say(pn + " waves at " + who->query_name() + ".\n", who);
      tell_object(who, pn + " waves at you.\n");
      return 1;
    }
   }
   write("You wave farewell.\n");
   say(pn+" waves farewell.\n",pl);
   return 1;
}

/* -------------------------- whistle ------------------------------ */

static int whistle(string arg) 
{
    object who;

    if(!stringp(arg)) 
	{
        write("You whistle appreciatively.\n");
        say(pn + " whistles appreciatively.\n",pl);
        return 1;
    }
    who = present(arg, environment(pl));

    if (objectp(who) && living(who))
	{
      tell_object(who, pn + " whistles appreciatively at you.\n");
      write("You whistle appreciatively at " + who->query_name() +".\n");
      say(pn + " whistles appreciatively at " + who->query_name() + ".\n", who);
      return 1;
    }
    write("Whistle at whom ?\n");
    return 1;
 }

/* -------------------------- wiggle ------------------------------ */

static int wiggle(string arg) 
{
  if (!stringp(arg))
  {
    write("You wiggle your bottom.\n");
    say(pn + " wiggles " + pl->query_possessive() +
	" bottom.\n",pl);
    return 1;
  }
  write("You wiggle your bottom "+arg+".\n");
  say(pn + " wiggles " + pl->query_possessive() +
    	" bottom "+arg+".\n",pl);
  return 1;
}

/* -------------------------- wink ------------------------------ */
static int wink(string arg) 
{
    object who;

    if(!stringp(arg)) 
	{
        write("You wink.\n");
        say(pn + " winks suggestively.\n",pl);
        return 1;
    }
    who = present(arg, environment(pl));

    if (objectp(who) && living(who))
	{
      tell_object(who, pn + " winks suggestively at you.\n",pl);
      write("You wink at " + who->query_name() +".\n");
      say(pn + " winks suggestively at " + 
    		who->query_name() + ".\n", who,pl);
      return 1;
    }
   write("Wink at whom ?\n");
   return 1;
}

/* -------------------------- yawn ------------------------------ */

static int yawn(string arg) 
{
  if (!stringp(arg))
  {
    write("My, what big teeth you have!\n");
    say(pn + " yawns.\n",pl);
    return 1;
  }
  write("You yawn "+arg+".\n");
  say(pn + " yawns "+arg+".\n",pl);
  return 1;
}

/* -------------------------- me ------------------------------ */

static int fcn_me(string arg)
{
 if (stringp(arg))
 {
   write("You "+arg+".\n");
   say("#"+pn+" "+arg+".\n",pl);
   return 1;
 }
 write("Me what ?\n");
 return 1;
}

/* endsoul */

