#include "room.h"
#include "tune.h"

#undef EXTRA_RESET
#define EXTRA_RESET extra_reset(arg);

#define QUEST_DESC	"very easy/easy/quite easy/moderate/quite hard/hard/very hard/only for the best adventurers"

#define	GM	"guild/master"
#define gd	1


ONE_EXIT("room/wiz_hall", "south",
	 "Room of quests",
"This is the room of quests. Every wizard can make at most one quest.\n" +
"When he has made a quest, he should have it approved by an arch wizard.\n" +
"When it is approved, put a permanent object in this room, wich has as\n"+
"short description the name of the wizard. All objects in this room will be\n"+
"checked when a player wants to become a wizard. The player must have\n"+
"solved ALL quests. To mark that a quest is solved, call 'set_quest(\"name\")'\n"+
"in the player object. The objects must all accept the id 'quest' and the\n"+
"name of the wizard. The objects must also define a function hint(),\n"+
"that should return a message giving a hint of where to start the quest.\n"+
"Note that players never can come here. set_quest(str) will return 1 if\n"+
"this is the first time it was solved by this player, otherwise 0.\n", 1)

int total_weight;
int max_weight;

string *desc;

int s_flag;
int c_total_weight;
int c_level;
int g_i;
int tq;
int *lv;
object *qo;

extra_reset(arg) {
  if (!arg) desc=explode(QUEST_DESC,"/");
  call_out("set_quests",1,0);
}

set_quests() {
  "players/herp/castle"->make_quest();
  "players/angmar/castle"->make_quest();
  "players/wolfi/castle"->make_quest();
  "players/ted/castle"->make_quest();
  "players/kantele/castle"->make_quest();
  "players/llort/castle"->make_quest();
  "players/moonchild/castle"->make_quest();
  "players/rasta/castle"->make_quest();
  "players/animal/castle"->make_quest();
  "players/whisky/castle"->make_quest();
  "room/adv_guild"->make_quest();
  "players/padrone/castle"->make_quest();
  "players/patience/castle"->make_quest();
}

init() {
  ::init();
  add_action("verbose_list","dump");
  add_action("calc_weight","calc");
}

list_all(long) {
  object ob;
  int i;
  ob=first_inventory(this_object());
  while(ob) {
    if(ob->id("quest")) {
      string str;
      i++;
      write(ladjust(i + "."));
      str=ob->short();
      write(ob->short_hint());
      if(this_player()->query_quests(str)) write(" (solved)");
      if(ob->compulsory()) write(" (compulsory)");
      write("\n");
      if(long) write("\n" + ob->hint() + "\n");
    }
    ob=next_inventory(ob);
  }
}
  
count(silently) {
    object ob;
    int i,j,k,l;

    ob = first_inventory(this_object());
    while(ob) {
	if(ob->id("quest")) {
	    string str;
	    str=ob->short();
	    j++;
	    if(this_player()->query_quests(str)) i++;
	    if(ob->compulsory()) {
		k++;
		if(this_player()->query_quests(str)) l++;
	    }
	}
	ob = next_inventory(ob);
    }
    if(!silently) {
	if(i==j) write("You have solved all " + j + " quests!\n");
	else write("You have solved " + i + " out of " + j + " quests.\n");
	if(k) {
	    if(k==l) write("You have solved all " + k 
		+ " compulsory quests!\n");
	    else write("You have solved " + l + " of the " + k
		+ " compulsory quests.\n");
	}
	    write("You have currently managed to score a quest rating of " +
		(100*this_player()->query_quest_points()/total_weight) + "%.\n");
	    write("To become a Wizard you have to solve all compulsory quests,\n"
		+ "and you must have scored a quest rating of " +
		QUEST_PERCENT_FOR_WIZ + "%, or higher.\n");
    }
    return k-l;
}

ladjust(str) { return extract(str+"    ",0,4); }

radjust(str) {
  int len;
  string longstring;
  longstring="   "+str;
  len=strlen(longstring);
  return extract(longstring,len-3,len);
}

list(i) {
    int w,idl;
    object ob;

    if(i<1) { write("No such quest.\n"); return 1; }
    ob=first_inventory(this_object());
    while(ob) {
	if(ob->id("quest")) {
	    string str;
	    i--;
	    str=ob->short();
	    if (!i) {
		write(ob->short_hint());
		if(this_player()->query_quests(str)) write(" (solved)");
		write("\n\n");
		write(ob->hint());
		if ((w=ob->query_weight())!=0) {
		    idl=ob->query_weight()*sizeof(desc)/max_weight-1;
		    if(idl==-1) idl=0;
		    write("\nThis quest is "+desc[idl]+".\n");
		    if(ob->compulsory())
			write("\n** You must solve this quest to become wizard **\n");
		}
		return;
	    }
	}
	ob = next_inventory(ob);
    }
}

enter_inventory(ob) {
string name;
int i,w;
object *o;

  if (ob->id("quest")) {
    max_weight=0;
    name=ob->query_name();
    o=all_inventory(this_object());
    for (i=0;i<sizeof(o);i++) {
	w=o[i]->query_weight();
        if (o[i]->id(name) && o[i]!=ob) {
	   w=o[i]->query_weight();
	   if (w>max_weight) max_weight=w;
           total_weight-=w;
	   destruct(o[i]);
	}
	else if (o[i]->id("quest") && w>max_weight) max_weight=w;
    }
    total_weight+=ob->query_weight();
  }
} 

query_total_weight() { return total_weight; }

verbose_list() {
object *o;
int i,tq,max_l,lvl,qexp,weight;

  if (!this_player()->query_wizard()) return;
  write("Total weight: "+total_weight+".\n");
  write("Maximum weight: "+max_weight+".\n");
  o=all_inventory(this_object());
  for (i=0;i<sizeof(o);i++)
     if (o[i]->id("quest")) {
	weight=o[i]->query_weight();
	if (weight!=0) {
	  max_l=GM->query_levels(gd);
	  qexp=GM->query_exp(gd,max_l)*weight/total_weight;
	  lvl=GM->query_level(gd,qexp);
          write(o[i]->query_name()+"\t"+o[i]->query_weight()+" points. "+
	        "\tExp "+qexp+" points.\tLevel "+lvl+".\n");
	}
	else write(o[i]->query_name()+":\tNo Weight.\n");
	tq++;
     }
  write("Number of quests: "+tq+".\n");
  return 1;
}

calc_weight(str) {
  if (!this_player()->query_archwiz()) return;
  if (str=="!") s_flag=1;
  else s_flag=0;
  write("Give the total weight: ");
  input_to("g_total_weight");
  return 1;
}

g_total_weight(str) {
object *ob;
int i;

  sscanf(str,"%d",c_total_weight);
  ob=all_inventory(this_object());
  qo=allocate(0);
  tq=0;
  for (i=0;i<sizeof(ob);i++)
     if (ob[i]->id("quest")) {
	tq++;
        qo+=({ ob[i] });
     }
  lv=allocate(tq); 
  write("There are "+tq+" quests in total.\n");
  if (tq==0) return 1;

  g_i=0;
  write("("+g_i+") "+qo[g_i]->query_name()+": Give the desired level: ");
  input_to("g_level");
  return 1;
}

  
g_level(str) {
  sscanf(str,"%d",lv[g_i]);
  g_i++;
  if (g_i==tq) {
    calc_weights();
    return 1;
  }
  write("("+g_i+") "+qo[g_i]->query_name()+": Give the desired level: ");
  input_to("g_level");
}

calc_weights() {
int i,w,max_exp,cmax_exp;

  max_exp=GM->query_exp(gd,GM->query_levels(gd)); 
  cmax_exp=0;
  for (i=0;i<tq;i++) cmax_exp+=GM->query_exp(gd,lv[i]);
  if (cmax_exp==0) {
     write("No levels given.\n");
     return 1;
  }
  if (max_exp!=cmax_exp)
     write("\nCaution, sum of Quest-Experience not equal to Max-Experience!\n"+
	   "Sum: "+cmax_exp+"\n"+"Max: "+max_exp+"\n"+
	   "Using calculated sum, resulting levels will differ from "+
	   "given levels.\n");
  write("\nCalculated weights:\n");
  for (i=0;i<tq;i++) {
    w=c_total_weight*GM->query_exp(gd,lv[i])/cmax_exp;
    write("("+i+") "+qo[i]->query_name()+": ");
    if (w!=0) write(w+" points.\n");
    else write("No weight.\n");
    if (s_flag) qo[i]->set_weight(w); 
  }
  if (s_flag) total_weight=c_total_weight;
  return;
}
