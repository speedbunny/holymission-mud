inherit "/obj/monster";
#define TO this_object()
#define env(x) environment(x)

string s;
int i;
object leader,weap,arm;
int is_leader;

void set_leader(object ob) {

    leader=ob;
    if (leader==TO) { is_leader=1; }
    else is_leader=-1;
}

int set_leader_yourself() {
    object ob;


    set_leader(TO);
    ob=first_inventory(env(TO));
    while(ob){
        if (ob->id("nottingham soldier"))   ob->set_leader(TO);
        ob=next_inventory(ob);
    }
    return 1;
}

int is_soldier_here(){    /* returns 1 if there is another soldier, else 0 */
 object ob;
 
 if ( present("nottingham soldier",env(TO)) ){
      ob=first_inventory(env(TO));
      while(ob){
       if (ob->id("nottingham soldier") && ob!= TO ) return 1;
       ob=next_inventory(ob);
      }
  }
  return 0;
}


object find_leader() {

    object ob;

    ob=first_inventory(env(TO));
    while(ob) {
         if (ob->id("nottingham soldier") && (ob->query_is_leader()==1))
             return ob->query_leader();
         ob= next_inventory(ob);
    }
    return 0;
}

query_leader() { return leader; }

query_is_leader() { return is_leader; }

void reset(int arg) {


    ::reset(arg);

    set_random_pick(13);
    load_chat(19,({"The soldier says: Have you seen Robin ? \n",
                   "The soldier says: I am looking for Robin Hood.\n",
                   "The soldier says: Have you been in the Sherwood forest ?\n",
                   "The soldier says: The dark forest is danger. \n",
                   "The soldier says: Have you seen Robin Hood ?\n",
                   "The soldier says: If you find Robin, tell it to me !\n",
                   "Nottingham's soldier grins evilly.\n",
                   "Nottingham's soldier grins demonicaly.\n",
                   "Soldier exclaims: I want the head of Robin Hood ! \n",
                   "The soldier waves with his sword.\n",
                   "The soldier raises an eyebrow.\n"
                }));
     load_a_chat(52,({"The soldiers grins evilly.\n",
                     "Nottingham's soldier looks at you.\n",
                     "The soldier says: I'll kill you.\n",
                     "The soldier says: You are poor creature !\n",
                     "The soldier says: I'll say the sheriff about you.\n"
                     }));
  
    if (arg) return;

    set_name("soldier");
    set_alias("knight");
    set_alt_name("nottingham soldier");
    set_race("human");
    set_short("Sheriff's soldier");
    set_long("This is a soldier. He is from Nottingham.\n");
    set_level(6);
    set_hp(400);
    set_al(10);
    set_gender(1);
    is_leader=0;
    set_aggressive(0);
    set_wc(7);
    set_ac(1);
    add_money(50);
    weap = clone_object("/players/goldsun/sherwood/obj/solarm");
    arm = clone_object("/players/goldsun/sherwood/obj/solsword");
    transfer(weap,TO);
    transfer(arm,TO);
    command("wield sword");
    command("wear platemail");
    if (sscanf(file_name(this_object()),"%s#%d",s,i)==2)
        call_out("wandering",30);
    call_out("my_heart_beat",2);
}

void rescue()
{
    object vic;

      if (objectp(leader) && env(leader) == environment() &&
          objectp(vic = leader->query_attack()) && vic != TO)
      {
          TO->attack_object(vic);
          vic->change_attacker(TO);
      }
}

void my_heart_beat(){

 if (is_leader==-1) rescue();
 if (is_leader==-1 && objectp(leader) && env(leader)!=env(TO) ){
    say("Soldier leaves folloving his commander.\n");
    tell_room(env(leader),"Soldier arrives.\n");
    move_object(TO,env(leader));
 }   
 else if (objectp(leader)) set_leader_yourself();

 while (remove_call_out("my_heart_beat") !=-1);
 call_out("my_heart_beat",2);

}

init(){
 check_for();

 ::init();

   destruct(this_object());
add_action("check","check");
}

void check(){
 if (this_player()->query_immortal()){
 write(is_leader+"\n");
 write(file_name(this_object())+"\n");
 }
}


int check_for() {
object obj;

    if (is_leader==-1) return 1;  /* -1 cannot become a leader */
    if (is_soldier_here()) {
         if (find_leader()) set_leader(find_leader());
          else set_leader_yourself();
    return 1;
    }
}


int catch_tell(string str){
 string who, where;

    if (is_leader==-1){ return 0; } 
    if (sscanf(str, "%s leaves %s.\n",who,where)==2){
        call_out("moven",2,where);
     }
    return 1;
}

int moven(string where) {
    
    return command(where,this_object());
}

int wandering() {
/* string s;
 int i;
  */
    if ( is_leader!=-1 ){
          random_move();
	  
     }
     
    while (remove_call_out("wandering") !=-1);
    if (sscanf(file_name(TO), "%s#%d",s,i)==2)
        call_out("wandering",30);
    return 1;
}


