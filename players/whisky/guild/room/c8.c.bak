

inherit "/room/room";
#include "../guild.h"


void reset(int arg) 
{
  if (filter_live(this_object()) < 1)
      CM("gmonk");

    if (arg) return;
    set_light(1);
    short_desc = "In a chapel"; 
    long_desc = BS(
        "This is the northern end of the chapel. It's a silent place "
      + "so that you can hardly hear the praying of the monks in the "
      + "southern part. The corridor leads further to the east, west, " 
      + "south and a passage to the north.");
    items = ({ 
            "walls","White stone walls",
            "bottom","A brown wooden bottom"
             });
    dest_dir = 
        ({
        PATH+"c7","west",
        PATH+"c9","east", 
        PATH+"c5","south",
        PATH+"c10","north"
        });
}

// blocking the entrance to the inner chambers for no monks 

status move(string arg)
{
   object bruce;
   object pent;

    if (!stringp(arg)) 
         arg = query_verb();

    bruce = present("bruce",this_object());
    pent = present("pentagram",this_player());

    if (this_player()->query_guild()==7 || this_player()->query_guild() == 13
        || this_player()->query_immortal())
    {
        if (arg == "north" && objectp(bruce) && living(bruce)) 
        {
           tell_room(this_object(),
           "Bruce says: Welcome "+capitalize(this_player()->query_real_name())+
                 ".\n\n");
        }
        return ::move(arg);
    }
    
    bruce = present("bruce",this_object());
    pent = present("pentagram",this_player());

    if (arg == "north" && objectp(bruce) && living(bruce) && !objectp(pent))
    {
       if (this_player()->get_skill("monk_practice"))
       {

            tell_room(this_object(),
            "Bruce says: Welcome "+capitalize(this_player()->query_real_name())
            +" it's a pity you left our guild !\n\n");
             return ::move(arg);
       }
       tell_room(this_object(),
       "Bruce says: Sorry "+capitalize(this_player()->query_real_name())+
       ", you have to stay out, of these chambers.\n");
       return 1;
    }
    return ::move(arg);
}


void init()
{
   ::init();
}
