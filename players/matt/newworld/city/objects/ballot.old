inherit "/obj/thing";

#include "lw.h"
#include "/players/matt/defs.h"

int voted;
string sender, topic, *choice_array, choice;
object master;

reset(arg) {
  ::reset(arg);
  if(arg) return;
  set_name("ballot");
  set_alias("paper");
  set_short("Ballot");
  set_long("This is a voting ballot. You can probably read it.\n");
  set_weight(0);
}

init() {
  ::init();
  add_action("read",    "read");
  add_action("vote",    "vote");
  add_action("abstain", "abstain");
  add_action("rip",     "rip");
  add_action("dest",    "destruct");
}

read(arg) {
  int i;
  if(id(arg)) {
    write("You read the ballot. It says:\n\n");
    write("This is a ballot, sent to you by " + CAP(sender) + ".\n");
    write("The issue to be voted on is as follows: \n");
    write(lw(topic + "\n"));
    if(sizeof(choice_array)) {
      write("Possible choices are:\n");
      for(i = 0; i < sizeof(choice_array); i++)
	write("  #" + (i + 1) + " - " + choice_array[i] + "\n");
    }
    if(!voted) {
      write("To vote on your choice, just type \"vote <choice>\"\n");
      if(sizeof(choice_array)) write("or \"vote #<number>\".\n");
      write("To abstain but still hear the results, type \"abstain\".\n");
      write("To destroy the ballot, type \"rip ballot\".\n");
      write("You have " + master->query_time() + " seconds left " +
	    "to vote.\n");
    }
    else write("You have chosen " + choice + ".\n");
    return 1;
  }
}

vote(arg) {
  string which;
  if(!voted) {
    if(sizeof(choice_array)) {
      if(sscanf(arg, "#%d", which) &&
	 (which <= sizeof(choice_array)) &&
	 (which >= 1)) arg = choice_array[which - 1];
      else if(member_array(arg, choice_array) == -1) {
	write("That is not one of the choices.\n");
	return 1;
      }
    }
    master->set_vote(arg);
    master->add_hearer(TP->RNAME);
    write("You choose " + arg + ".\n");
    write("Please rip up the ballot if you're done with it.\n");
    voted = 1;
    choice = arg;
    return 1;
  }
  write("You've already chosen " + choice + ".\n");
  return 1;
}

abstain(arg) {
  if(!arg) {
    if(!voted) {
      write("You abstain.\n");
      write("Please rip the ballot if you're done with it.\n");
      master->set_vote();
      master->add_hearer(TP->RNAME);
      voted = 1;
      choice = "to abstain";
      return 1;
    }
    write("You've already chosen " + choice + ".\n");
    return 1;
  }
}

rip(arg) {
  if(id(arg)) {
    write("You rip up the ballot.\n");
    say(TP->SNAME + " rips up a ballot.\n");
    if(!voted) master->set_vote();
    destruct(TO);
    return 1;
  }
}

dest(arg) {
  if(id(arg) && !voted && TP->query_immortal())
    master->set_vote();
}

drop() {
  write("You drop the ballot; it disintegrates.\n");
  say(TP->SNAME + " drops a ballot, which disintegrates.\n");
  if(!voted) master->set_vote();
  destruct(TO);
  return 1;
}

set_choices(arg) {
  choice_array = arg;
  return 1;
}

set_topic(arg) {
  topic = arg;
  return 1;
}

set_sender(str, obj) {
  sender = str;
  master = obj;
  return 1;
}

query_vote() { return voted; }
