/* ################################################################################## 

                           OBJECT  Keg 
                           
                           
   This is a new obj/keg. 

   These functions are defined:

       set_name(str)     To set the name of the item.
       set_alt_name(str) To set a second name of the keg.
       set_alias(str)    To set another alt_name.
       set_short(str)    To set the short description.
       set_long(str)     To set the long description.
       set_value(int)    To set the value of the item.
       set_taps(int)     To set how often you can tap from the keg
       set_weight(int)   To set the weight of the item.
       set_strength(int) To set the healing power of the item.
       set_consumer_mess(str)
                To set the message that is written to the 
                player when he eats the item.
       set_consuming_mess(str)
                To set the message given to the surrounding
                players when this object is eaten.
                
  calculation: The heal_self of a keg is set by  ( set_strength * set_taps ).
               The intoxination of a keg is ( ( set_strength * set_taps ) / 3 ).

 #################################################################################### */

#include "lw.h"

string name, short, long, consuming_mess, consumer_mess, alias, alt_name;
int value, strength, weight, taps, real_value, maxtaps;

init() {
  add_action("do_drink","tap");
   }

 reset(arg) {
  if (arg) return;
  name = "keg";
  weight = 1;
  taps = 1;
  value = 1;
                
}

id(str) { return  str == name || str == alt_name || str == alias; }

short() { 
  if(!short) return name;
  return short;
}

long() {
  if(!long)
    write(short() + ".\n");
  else
    write(process_string(long)+"\n"+
          "Just type <tap keg> to drink from it.\n");
     if (taps > (maxtaps / 2)) 
      write("The keg is nearly full.\n");
     else if (taps > (maxtaps*4 / 9))
      write("The keg is  halffull.\n");
     else if (taps > (maxtaps / 3))
      write("The keg is nearly halfful.\n");
     else if (taps > (maxtaps / 8))
      write("The keg is nearly empty.\n");
     else if (taps) 
      write("There is a little left in the tap.\n");
     else
      write("The tap is empty.\n");
      
   if (this_player()->query_wizard()) {
      write("\nTaps left: "+taps+"\n");      
     }
      
   } 
     

get() { return 1; }

do_drink(arg) {
  object tp;

  tp = this_player();

  if (!id(arg)) return 0;
  
   if (taps) {
    if (tp->drink_alcohol( strength / 3) )   
        tp->heal_self( strength * 3 ); /* set_value * 6 for min */
   taps--; 
   if (consumer_mess)
      write(consumer_mess+"\n");
    else
      write("Ok.\n");
   
   if (consuming_mess)
     say(capitalize(this_player()->query_name()) + consuming_mess+"\n");
     else 
      say(capitalize(this_player()->query_name()) + " taps from "+short()+"\n");
  }
    else {
    write("But there are no taps left.\n");
   }    
    return 1;
}

      
set_name(n) { name = n; }
set_short(s) { short = s; }
set_long(l) { long = l; }
set_taps(t) { maxtaps = t; taps = t; }

set_value(v) {  value = v; }
      
      
set_weight(w) { weight = w; }
    
set_strength(s) { strength = s; }

set_alias(a) { alias = a; }
set_alt_name(an) { alt_name = an; }

set_consuming_mess(m) { consuming_mess = m; }
set_consumer_mess(m) { consumer_mess = m; }

query_value() { return (20+ (value  * taps / maxtaps)); }  
query_weight() { return weight; }
query_strength() { return strength; }
query_name() { return name; }

query_taps() { return taps; }
query_keg() { return 1;}

