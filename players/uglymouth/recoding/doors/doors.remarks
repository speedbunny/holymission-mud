I have been studying the door code a bit more, and I think that the old code
itself forms an obstacle for efficiency improvement. The bad parts of the
old code are:
- ugly use of macro definitions
- needs two objects for one door
- door objects are not mutually checked
- accidental destruction is not safeguarded
- the macro does not allow the use of replace_program

Given these arguments, I see the following possibilities to solve this
problem:
A - Do nothing and keep working with the old code
      Pro: needs no work
      Contra: no improvement
B - Rework the old code to allow door setup in clone_list (I don't think it
        allows for much more improvement while keeping the same principle)
      Pro: allows use of replace_program
      Contra: other disadvantages remain
C - Rework new code into a door object rather than it being room code
      Pro: rather big code improvement
      Contra: still needs two objects for only one door and no destruction 
        safeguard
D - Add door objects to room code
      Pro: compatible with old code
      Contra: adding more worthless objects (codewise) -> bad memory use
E - Implement room code and adept thiefsoul/magesoul/scrolls/etc. to use
        both systems, while gradually getting rid of the old code
      Pro: eventually complete use of efficient, consistent code
      Contra: A lot of work searching out all objects with auto-unlock
        functions. A lot of work later updating old doors (no hurry though)

Personally I think that B and E are the only options worth considering,
IF you want to change the old code (option A). Of course, my choice would
be option E, since there's a lot to be gained by it.
I think it is basically a choice between maintaining downward compatibility
at the cost of little improvement in efficiency and implementing a new
system which costs a lot of work (although initial implementation won't be
that difficult, since I don't expect there to be too many objects that have
an auto-unlock function; updating old doors will require a lot of work, but
is no requirement for implementation per se).
