SET&QUERY - weapon.c

Usual defined LFUN's:
set_id(s),set_name(s),set_weight(i),set_value(i),set_alt_name(s),set_alias(s),
set_short(s),set_long(s),set_info(s),query_info(),query_value(),query_name(),
query_weight().

set_class(i): This sets the class of the weapon. i must be between 0 and 20,
              consult tables in the rules. The weight is also set by this
              function to a weight appropriate for the class. The higher the
              class the more damage the weapon does. The weight set by this
              function is the minimal weight, with set_weight(i) only higher
              weights can be set.
              Example: set_class(10);
set_hit_func(o): This sets the hit_function to the object o. After this call
                 is done, every time a weapon hits something it will call the
                 function weapon_hit(o), in which o is the object that is
                 under attack, and add the value returned by this function to
                 the damage. Use this function wisely, the total damage (return
                 value of weapon_hit(o) and the class of the weapon) may not
                 exceed 20.
                 Example: set_hit_func(this_object());
set_wield_func(o): This sets the wield_funcgtion to the object o. After this
                   call every attempt to wield the weapon will go through the
                   function wield() in that object. I don't know if this
                   function gets any parameters. I think that the player can't
                   wield the weapon if this function wield() returns 0. Do not
                   set the object to a weapon, since the wield() function is
                   already defined there.
                   Example: weapon->set_wield_func(this_object());
set_read(s): This sets the string s as the string displayed if one reads the
             weapon. s needs a \n.
             Example: set_read("The message reads: 'Elendil'");
set_type(i): This sets the type of the weapon. 0 means it needs dexterity to
             use it, and 1 and 2 are used when it has to be strength or 
             dexterity AND strength.
             Example: set_type(1);
set_two_handed(): This makes the weapon two handed (see query_two_handed()).
query_weapon_type(): This returns what kind of weapon it is. There are three
                     kinds of weapons: weapons needing strength, weapons
                     needing dexterity and weapons needing both.
query_weapon(): This returns 1, to identify that this is a weapon.
query_wielded(): This returns the player wielding the weapon.
query_two_handed(): This returns if the weapon needs to have two hands when
                    wielding it, effectively blocking the possibility to use
                    a shield.
