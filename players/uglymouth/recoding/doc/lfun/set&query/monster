SET&QUERY - monster.c

set_name(s),set_alias(s),set_alt_name(s),set_short(s),set_long(s).

set_level(i): This function sets the level of the monster. This function NEEDS
              to be called in a monster. It also sets the stats and the hit-
              points and the spellpoints, the natural armourclass and
              weaponclass, and determines the amount of XP of the monster.
              Example: set_level(1);
set_race(s): This sets the race of the monster. There is no list available of
             which races are allowed and which not at the moment.
             Example: set_race("orc");
set_hp(i): This sets the maximum hit points and the hit points to value i.
           Example: set_hp(100);
set_sp(i): This does the same thing as set_hp(i), but for the spellpoints.
           Example: set_sp(200);
set_ep(i): This sets the experience the monster gives. This value is checked
           and can only be lowered from the value mentioned in set_level(i).
           Example: set_ep(0);
set_prevent_poison(i): This makes the monster immune to all kinds of poisoning
                       by disabling the add_poison function. 1 to disable, 0 to
                       enable poisoning of the monster.
                       Example: set_prevent_poison(1);
set_al(i): This sets the alignment value of the monster. Values greater than
           zero are good, and lower than zero is evil. 0 is neutral.
           Example: set_al(-60);
set_wc(i): This sets the natural weaponclass of the monster to i. This
           weaponclass is added to the weaponclass of the weapon the monster
           is wielding.
           Example: set_wc(10);
set_ac(i): Same thing as set_wc(i), but then for armourclasses.
           Example: set_ac(5);
set_move_at_reset(): This lets the monster move randomly each reset.
set_aggressive(i): This will make the monster aggressive (i.e. it will attack
                   on sight) if i is 1, or unaggressive if i is 0. It will not
                   make the monster stop fighting if it's fighting when it's
                   called with i=0.
                   Example: set_aggressive(1);
set_no_steal(): This makes it impossible to steal something from the monster.
set_no_ears(): This will make the monster unaffected by bard spells.
set_has_gills(): This allows the monster to breathe under water.
set_own_env(s): This sets the environment the monster can live in, at this time
                only "water" is a good s. If s is "water", it does the same
                thing as set_has_gills().
                Example: set_own_env("water");
set_chance(i): This is the percentage (0-100) chance that the monster will
               cast a spell each round it's under attack.
               Example: set_chance(20);
set_spell_mess1(s): This is the message all the people in the room will read
                    if the monster casts a spell. No \n is required. Example: 
                    set_spell_mess1("Dragon breathes at his opponent.");
set_spell_mess2(s): This is the message the player gets on the screen when
                    affected by a spell of a monster.
                    Example: set_spell_mess2("You are fried by the dragon.");
set_spell_dam(i): This sets the maximum number of hit points of damage the
                  spell that the monster casts does.
                  Example: set_spell_dam(10);
set_frog(): This makes the monster a frog. If someone kisses the monster, that
            person changes into a frog too.
set_whimpy(i): If there is no i, the monster will flee at 20% of it's hit
               points. Otherwise at i%.
               Example: set_whimpy(50);
set_tame(o): This is used by the mages guild, and is the object that tamed the
             monster last. For more information, ask Llort.
set_match(o,sa1,sa2,sa2): This function makes it easier for programmers to 
                          make monsters that react to their environment. o is
                          the object the functions mentioned in the first
                          string array have to be called in, sa2 contains the
                          strings that will cause this function to be invoked
                          (i.e. if the monster 'sees' a string of sa2 on its
                          screen, it will invoke the corresponding function in
                          sa1. The use of sa2 is unclear for me at the moment,
                          the best thing to do is to make this a list of ""'s.
                          All string arrays need to be of the same length, a
                          better description is in 
                          /doc/LPC/beginners/catch_tell1. Example:
                          set_match(this_object(),{("follow"}),{("leaves"}),
                                    {(""})); /* This will call the function
                          follow everytime someone leaves the monster */
set_dead_ob(o): This sets the object that the monster_died(o) function will be
                called in if the monster died. This monster_died(o) function
                will be called if the monster dies, the 'o' of monster_died
                is the killer.
                Example: set_dead_ob(this_object());
set_random_pick(i): This makes the monster pick up objects randomly, if i is 1.
                    If i is 0, the monster stops doing this. 
                    Example: set_random_pick(1);
set_init_ob(o): This sets the object that the monster_init(o) will be called
                in. This function will be called each time someone comes in
                sight of the monster. The 'o' of monster_init is the monster,
                not the player coming in sight.
                set_init_ob(this_object());
query_race(): This returns the race of the monster.
query_no_steal(): This returns 1 if it is impossible to steal something from
                  the monster, otherwise it returns 0.
query_create_room(): This returns the room the monster was created in.
query_no_ears(): This returns if the monster can't be affected by Bard spells.
query_poisoned(): This returns the amount of poison that's in the body
                  of the monster.
query_prevent_poison(): This returns if the monster is immune to poison.
