SET&QUERY - living.c

Usual defined LFUN's:
query_name(),query_value(),query_weight(),set_weight().

set_race(s): This sets the race of the living to s. This needs to be something
             that describes the race correctly. A good list of races is
             unavailable at the moment, but human, orc, half-elf, elf, hobbit,
             dwarf and troll are always ok. It is recommended to set the race
             in ANY creature made.
             Example: set_race("human");
set_size(i): This sets the size of the living. A living can only wear armours
             of the same size, or of size any. For consistency it is
             recommended NOT to set the size to ANY (0). The other sizes are:
             1 for tiny, 2 for small, 3 for medium, 4 for large and 5 for huge.
             Example: set_size(2);
set_no_fight(i): This function only works if the living is an npc, and will
                 prevent it from fighting back if attacked when i is unequal
                 to zero.
                 Example: set_no_fight(1);
set_n_ac(i): This is a function to set the natural ac of a living, i.e. the ac
             the living has got from nature. The ac from the objects will be
             added to this.
             Example: set_n_ac(5);
set_n_wc(i): This is the same function as set_n_ac, but it will set the wc
             of the living. The weaponcount from the weapon the monster is
             wielding will be added to this.
             Example: set_n_wc(10);
set_gender(i): If i=0, the living becomes neutral, if it is 1 then the living
               becomes male, and if it is 2, then the living becomes female.
               Example: set_gender(2);
set_neuter(): This will make the living become of neutral gender.
              Example: set_neuter();
set_male(): This will make the living become of male gender.
            Example: set_male();
set_female(): This will make the living become of female gender.
              Example: set_female();
set_flag(i): Only use this if you have got an i from an arch. This sets a flag
             in the living, which can be tested with test_flag(i). It is very
             useful if you need to remember things about the living, usually
             a player.
             Example: set_flag(143);
set_stats(i1,i2): This sets stat i1 (according to the list mentioned in
                  query_stats(i)) to the value i2. Certain limitations will
                  be aplied to i2, and the spellpoints and hitpoints will be
                  changed if constitution or intelligence are affected.
                  Example: set_stats(3,30);
set_str(i): This sets the strength of the living to i. Checks will be made.
            Example: set_str(2);
set_dex(i): This sets the dexterity of the living to i. Checks will be made.
            Example: set_dex(3);
set_con(i): This sets the constitution of the living to i. Checks will be made,
            and hitpoints will be adjusted.
            Example: set_con(4);
set_int(i): This sets the intelligence of the living to i. Checks will be made,
            and spellpoints will be adjusted to the new value.
            Example: set_int(5);
set_wis(i): This sets the wisdom of the living to i. Checks will be made.
            Example: set_wis(6);
set_chr(i): This sets the charisma of the living to i. Checks will be made.
            Example: set_chr(10);
set_smell(s): This sets the smell of the player/monster. 0 means no smell and
              anything else will be seen as the current smell of the living.
              This can be used to programme perfume, or making people disgus-
              ting when they've waded in blood, for example. No \n is
              necessary, a '.', '?' or '!' is. Example:
              this_player()->set_smell("You smell "
                + this_player()->query_pronoun()+" has dug into the dirt.");
query_smell(): This returns the smell of the living. It's used in rooms to
               define the smellroutine.
query_size(): This returns the size of the living. The sizes are mentioned in
              set_size(i).
query_arm_types(s): If no s is present, this will return an array of all
                    types of armours the living is wearing (array of strings).
                    If s is a string, it will be matched to the armours that
                    are worn, and if one is encountered which has the same
                    type, a number unequal to zero is returned.
                    Example: query_arm_types("cloak");
query_race(): This returns the race of the creature. No list of races is
              available at the moment.
query_str(): This returns the strength of a living, i.e. how strong, how many
             objects can be carried, how well the living can fight with weapons
             that need strength.
query_dex(): This returns the dexterity of a living, i.e. how well the living
             can fight with weapons that need intelligence.
query_con(): This returns the constitution of a living. Constitution has much
             to do with hitpoints.
query_int(): This returns the intelligence of a living. Intelligence has much
             to do with spellpoints.
query_wis(): This returns the wisdom of a living. It is used for guilds.
query_chr(): This returns the charisma of a living. Also used in guilds, and
             there are thoughts about using it to bargain in shops.
query_stats(i): This returns the stat number i. 0 is strength, 1 is dexterity,
                2 is constitution, 3 is intelligence, 4 is wisdom and 5 is
                charisma. These can be used to check if they are high enough
                for someone, strength to destruct a door for example.
                Example: query_stats(1);
query_gender_string(): This returns the string neuter if the living is neutral,
                       male if he is male, and female if she is female.
query_pronoun(): This returns it if the living is neutral, he if he is male,
                 she if she is female.
query_possessive(): This returns its if the living is neutral, his if he is
                    male, and her if she is female.
query_objective(): This returns it if the living is neutral, him if he is male 
                   and her if she is female.
query_n_ac(): This function can be used to check the natural ac of a living.
              See set_n_ac(i).
query_attack(): This returns 0 if the living is not under attack, otherwise
                it returns the object of the attacker.
query_wielded(): This returns the name of the weapon the living is wielding,
                 or 0 if one the natural weaponcount is active.
query_wielded_weapon(): Identical to query_wielded().
query_armour(): This returns an array of armour-objects that the living is
                wearing.
query_others(): This returns an array of others (whatever that are) that the
                living has got. The elements of the array are objects.
query_ghost(): This returns 1 if the living is a ghost, and 0 when it's still
               alive.
query_spend_points(): This returns the number of points the living still has to
                      spend in the guild. If this is greater than zero, the
                      character needs to spend points and will be kept at its
                      guild till these are spended. This should NOT return
                      anything else than 0 outside the guild, but it is
                      possible.
query_money(): This returns the amount of money a living has got.
query_exp(): This returns the amount of experience the living has got.
query_frog(): This returns 1 if the living is a frog, and 0 when it is not.
query_hp(): This returns the current amount of hit points from a living.
query_hit_point(): Identical to query_hp().
query_wc(): This returns the weapon class of the living.
query_ac(): This returns the armour class of the living.
query_age(): This returns the age of the living. This is in seconds.
query_gender(): This returns the gender of the living. 0 is neutral, 1 is male
                and 2 is female.
query_neuter(): This returns 1 if the creature has a neutral gender.
query_male(): This returns 1 if the living is male.
query_female(): This returns 1 if the living is female.
query_n_wc(): This returns the natural weapon count of the living.
query_sp(): This returns the current amount of spell points of a living.
query_spell_points(): Identical to query_sp().
query_level(): This gives the level of the living.
query_no_fight(): This returns 0 if the npc is allowed to fight, something
                  else otherwise.
query_max_hp(): This returns the maximum number of hitpoints the living has.
query_maxhp(): Identical to query_max_hp().
query_max_sp(): This returns the maximum number of spellpoints the living can
                have.
query_maxsp(): Identical to query_max_sp().
query_wimpy(): This returns if the living will wimpy or not.
query_current_room(): This returns the file name of the environment the living
                      is in.
query_short_name(): This returns the short name of the character, i.e. the
                    real name with a capital, or the name of the ghost if the
                    character is dead.
query_real_name(): This returns the real name of the character, the name
                   without capitals or pretitles. This name will never change
                   for one character.
query_alignment(): This returns the alignment of the character. If it's
                   greater than zero, the character is good, if it's less than
                   zero the person is evil, around zero is neutral.
query_npc(): If the character isn't controlled by a player, this will return
             1, 0 otherwise.
query_immortal(): This function returns 1 if someone is immortal, i.e. not a
                  player anymore.
query_wizard(): This function returns 1 if someone is a wizard, i.e. immortal
                AND not an apprentice or new wizard.
query_newwiz(): This function returns 1 if someone is a new wizard, i.e.
                immortal AND not an apprentice.
query_archwiz(): This function returns 1 if someone is an archwizard or god.
