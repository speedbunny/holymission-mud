/* Thanx to Anipa for this code */
 
#define MAX_LIST 40
#define SPACES "                                         "
 
int row,value,count,first_item;
string name_of_item;
 
short()
{
  return "Store room for the Shop of Horrors";
}
 
init()
{
  write(short()+".\n");
#if 0
  if(this_player() && this_player()->query_level()<100)
    {
      write("Seniors+ only area.\n");
      move_object(this_player(),"/room/church");
    }
	if(this_player()->query_level() > 99)
#endif
	add_action("south","south");
}
 
inventory(str)
{
  object ob;
  int max;
  if(str=="all")
    str=0;
  row=0;count=0;first_item=1;
  max = MAX_LIST;
  ob = first_inventory(this_object());
  while(ob && max) 
    {
      if(ob->query_value())
{
  count++;
  if(!str || (str && ob->id(str)))
    {
      list(ob);
      max--;
    }
}
      ob = next_inventory(ob);
    }
  if(row==1)
    write("\n");
  if(max==MAX_LIST)
    write("The shopkeeper sighs.\n");
}
 
set_strlen(str,len)
{
  return extract(str+SPACES,0,len-1);
}
 
list(ob)/* 2 columns by ++Anipa */
{
  int value;
  string str;
  if(first_item)
    {
      write(" #  cost  item                          #  cost  item\n"); 
      first_item=0;
    }
  value=ob->query_value();
  if (value)
    {
      if(count<10)
     str=" "+count+" ";
      else 
     str=count+" ";
      str=str+extract("     "+value*2,strlen("     "+value*2)-5);
      str=str+" "+ob->short();
      if(strlen(str)<39 && row==0)
{
  row=1;
  write(set_strlen(str,39));
}
      else
{
  if(row==1 && strlen(str)>=39)
    write("\n");
  row=0;
  write(str+"\n");
}
    }
}
 
value(item)
{
  name_of_item = present(item);
  if (!name_of_item)
    {
      return 0;
    }
  value = call_other(name_of_item, "query_value", 0);
  if (!value)
    {
      return 0;
    }
  write(item+" would cost you "+value*2+" gold coins.\n");
  return 1;
}
 
buy(item) 
{
  int no;
 
  name_of_item = present(item);
  if (!name_of_item)
    {
      if(sscanf(item,"%d",no) && no)
{
  no--;
  name_of_item=first_inventory(this_object());
  while(name_of_item && no)
    {
      if(name_of_item->query_value())
          no--;
      name_of_item=next_inventory(name_of_item);
    }
}
      if(!name_of_item)
{
  write("No such item in the store.\n");
  return;
}
    }
  item=name_of_item->short();
  value=name_of_item->query_value();
  if (!value)
    {
      write(capitalize(item)+" has no value.\n");
      return;
    }
  value *= 2;
  if (call_other(this_player(), "query_money", 0) < value) {
    write("It would cost you "+value+" gold coins, which you don't have.\n");
    return;
  }
  if (!call_other(this_player(), "add_weight",
  call_other(name_of_item, "query_weight"))) {
    write("You can't carry that much.\n");
    return;
  }
  call_other(this_player(), "add_money", 0 - value);
  move_object(name_of_item, this_player());
  write("You pay "+value+" coins for "+item+".\n");
  say(call_other(this_player(), "query_name") + " buys " + item + ".\n");
}
 
south()
{
  this_player()->move_player("south#players/animal/shops/shop");
  return 1;
}
 
 
reset(arg) {
    if (!arg)
     set_light(1);
    if(!present("ball")) {
     move_object(clone_object("players/animal/obj/football"),this_object());
     }
    if(!present("eye")) {
     object eye;
     eye = clone_object("players/animal/obj/eye");
        move_object(eye, this_object());
    }
    if (!present("torch")) {
     object torch;
     torch = clone_object("obj/torch");
        call_other(torch, "set_name", "torch");
        call_other(torch, "set_fuel", 2000);
        call_other(torch, "set_weight", 1);
        call_other(torch, "set_value", 21);
        move_object(torch, this_object());
    }
     if (!present("rope")) {
        move_object(clone_object("obj/rope"), this_object());
        }
     if (!present("bag")) {
         object sack;
         sack= clone_object("obj/bag");
         call_other(sack, "set_long", "A bag.\n");
         call_other(sack, "set_short", "A bag");
         call_other(sack, "set_name", "bag");
         call_other(sack, "set_alias", "sack");
         call_other(sack, "set_weight", 2);
         call_other(sack, "set_max_weight", 7);
         call_other(sack, "set_value", 20);
         call_other(sack, "set_can_open", 0);
         move_object(sack, this_object());
         }
    if (!present("snow boots")) {
     object boots;
     boots = clone_object("players/sauron/clone/boots");
     move_object(boots, this_object());
    }
}
store(item)
{
  string short_desc;
  object ob;
  
  short_desc = call_other(item, "short");
  ob = first_inventory(this_object());
  while(ob)
    {
      if (call_other(ob, "short") == short_desc)
{
  move_object(item, this_object());
  destruct(item);
  return;
}
      ob = next_inventory(ob);
    }
  move_object(item, this_object());
}
