messages ({({"shout_curse (Pell, Jan  2, 25)","That object never worked without some other object setting it up.",66,}),({"no further use of std.h (Streicher, Jan  6, 21)","I`ve heared some rumors, that there will be no further supporting of thestd.h rooms???Is thats true?????                                                 STREICHER                                          Lord of Minas Tirith                                           Building Minas Tirith",52,}),({"Re: sizeof() doc error (Macbeth, Jan  6, 25)","There IS a function to test whether a given expression yields an arrayor not. It's called pointerp.                                    Macbeth",57,}),({"set_wield_func, set_hit_func (Macbeth, Jan 22, 25)","These functions (in weapon.c) have been augmented by an optional secondparameter, giving the name of the function to be called instead of'wield' or 'weapon_hit', respectively. Have a look at /doc/build/weaponfor more information.                                            Macbeth",57,}),({"Special problem (Hagen, Feb  7, 21)","I am thinking of a special monster (a unicorn) to be caught in myarea. It is supposed to NOT flee in a direction a player COMES from.(As he/she/it is \"blocking\" the path.)So something should tell the unicorn where not to flee....I have talkd to several other wizzes about this but they are not sure how to do it.Any ideas? Are you even interested to programm some really great semi-kimonsters? There are fleeing and pursuing elves and some wimpy but ratherpack-happy wolfes to be taken care of.Hagen",62,}),({"Re: Special problem (Amylaar, Feb  7, 25)","make your area consistent using /std/room* , and test the exitswith query_room_exits(or what it was actually called...)then you can test the appropriate room for a player.",53,}),({"Re^2: Special problem (Demos, Feb 10, 1000)","Hi.. I don't think that this is quite the solution Hagen was looking for.If i understand him correctly, he needs wants to find out through which,(of potentially many) entrances a player entered a given room from.Perhaps not the best method of doing this, but pretty much the only one thatis supported by the current mudlib is: - Have the room determine the command the player used to enter the room,   (query_verb() in the init()) - Invert this direction to find the corresponding exit.I hope this suits your needs, and please tell me if it does / does not work.So long, Demos.",49,}),({"Re^3: Special problem (Hagen, Feb 13, 21)","We have been working on it, well Opal and perle have :).As the problem finally showed to be the fact that ALSO if there was a playerPRESENT when the unicorn arrives the best solution seemed to bean invisible item each player gets and which tells the unicornwhat he/she/it did last.(So if you do west and the unicorn arrives you block it's way east,but if you doo west, look at blabla bla, or inv or so, you \"stopguarding\"the exit you arrived through.)(Otherwise Demos' solution was the most elegant one that i got (I got another by mail)Thanks all... :)Hagen",41,}),({"Single threadedness and time delays (Demos, Mar  2, 1000)","Hello all, today Torch mailed me a question about time delays in the mud,since I think that my answer might be of value to others, I have repostedit here for your perousal:hi..                       In the code you mailed me, you assumed that the driver would continue executing the for-loop untill the exit condition arose.  The driver doesnot function this way.  the execution of object's code is single threaded,meaning that there is no parallel execution of lpc code (or any other codefor that matter).  The driver takes each input event at a time and executes untill that thread has finished (the routine called by the add_action doesa `return', or a run time error crops up.  This means that every time the  driver is executing one of your (or anybody else's) commands, it cannot execute anything else.  This means that if I write some code which doesnot do a return  (for (;;) ; for example) the driver will block and nothingelse will happen in the whole mud.  In order to prevent this happening, (a reboot would be required to alleviate the problem) the driver does somerun time accounting of the current execution thread, and terminates theexecution of the current thread if at some point it becomes too costly,with the error eval_cost too big.  The efun command can be used to see howcostly a certain command was in terms of execution time.  In order to answer your original question on how to do time delays etc,there are two main ways to handle them.  Firstly use efun::call_out if youwant to have a function in this_object() called after a certain space oftime.  Or define an lfun heart_beat, and use the efun::set_heart_beat (1)to arrange for the driver to call the function every two seconds.  However,it must be said that having a heart_beat running for an object is very costlyin terms of driver resources, so do *NOT* use the heart beat mechanism for polling etc.. I strongly advise you to turn off an object's heart beat whenyou no longer require it.  You can do this with the use of the efunset_heart_beat (0).  In 2.4.5 mud drivers, the call_out mechanism had a slightly differentsemantic.  It used to be the case that this_player() was not defined inroutines called by the call_out mechanism.  In my opinion this was sensible,but baffled many wizards who used efuns dependant on this_player(), efun::write for example).  However, now when a efun::call_out() is called,the values of this_player() (and maybe even this_interactive() aswell)are saved, and restored when the function is called.  However, this alsomeans that the saved value of this_player() might no longer exist, andstrange things indeed may happen...Happy hacking, Demos.P.S. Remember, if you have any more questions,      use the Force, read the Source.",60,}),({"couldn't /oom/room_composite be corrected. (Trixfix, Mar 12, 21)","HiI think the /room/room_composite - klass - concept could be followed morein the future, because i like this kind of desc. as it saves some trans-fer blocks.I would like to get some arguments for or against this kind of room.(if you don't know thsis kind of room you may see it in my workroom-areaor in /room/new_castles)but unfortunately there are still some bugs in it:-     - The Capitalize Fkt should be used on the around-lying objects...     - Living objects should be printed without an article                                               Looking forward to hearing                                               from You...                                                      Yours Trixfix",33,}),({"Re: couldn't /oom/room_composite be corrected. (Macbeth, Mar 12, 25)","I strongly advise against using /room/room_composite.First, it won't work correctly without having every objectinherit /std/object. Second, it has to be supported by player.cexplicitly. Third, it probably will disappear in the near future.                                   Macbeth",31,}),({"query_linkdead (Arkon, Apr  6, 21)","Could some elder wiz insert a query_linkdead in player.c?It's just query_linkdead () {return is_linkdead}...Arkon",22,}),({"Re: query_linkdead (Macbeth, Apr  6, 25)","There is no need for such a function. There is an efuninteractive() which returns 1 if its argument is an interactiveplayer and 0 otherwise.                             Macbeth",24,}),({"cd() (Foslay, Apr 12, 21)","I would like to set the path of the player object with my wiztoolIs it possible to change static cd() into cd() ?To prevent others from changing your path a test like  if (this_player() != this_object()) return;should be enough.FoslayPS.: Maybe a new function set_path() that performs the test and then    calls cd()?",30,}),({"Re: cd() (Macbeth, Apr 15, 25)","No. First, I don't like that the path can be manipulated from outside.This may lead to light security problems. Second, a check forthis_player()!=this_object() is insufficient since this_player()may be manipulated by means of init(), command(), etc.Third, there may be a check for previous_object() to allow onlycertain objects to use it. I'm thinking it over.                                   Macbeth",17,}),({"connected rooms (Foslay, Apr 17, 21)","I have programmed an object which connects rooms. The idea is thefollowing: The invisible object is cloned into a room and given an ID.Items with the same ID start to communicate with each other. There are flagsto control what they will tell each other:You can make players/items of one room visible in the other (they areenumerated in a single line with a location_desc string (e.g.: \"on thebalcony\", \"in the garden\", ...) at the end.You can make actions in one room visible in the other.You can make sounds (two sound levels) be heard in the other room.If you are interested i would like to hear ideas/opinions on the subject.I think it might even be an idea for the sunrise mudlib (not sure aboutthat :)The file is ~foslay/public/connect, ~foslay/public/demo/croom1.c is ademo for connect.Foslay (I hope this is the right board ?)PS.: It still prints debug messages, please ignore them.          (and CN_ACTIONS doesn't yet work)",14,}),})
my_topic "LPC discussions and informations"
my_gnome "A small gnome appears and secures some notes on the board that were loose.The gnome leaves again"
my_clean "A small gnome appears and takes an outdated note from the board.The gnome leaves again"
my_short "bulletin board on LPC discussions and informations"
maxmess 40
maxhead 50
allread 668
delay 60
