Herein a Calculating Automata will be proposed. 
My still living predecessors and even my 
already living successors make fun of me and do 
not regard my work as proper magic. Well the 
latter may be true, but a calculating automata
might certainly be useful. Creating ghosts to
do the work is un-trustworthy as past has shown.  

Because lots of formulas in this work have been 
denoted using roman numbering, this work starts 
with a short overview on that kind of numbering 
for those who are illiterate.
I : 1    II : 2   III : 3
V : 5    IV : 4   VI  : 6  .. VIII : 8
X : 10   IX : 9   XX  : 20     XXX : 30
L : 50   XL : 40  LX  : 60 .. LXXX : 80
C : 100  XC : 90  CC  : 200     CX : 110
Example: CXXVII = 100 + 20 + 5 + 2 = 127
In addition the symbol 0 will be introduced, as 
a number coming before I, meaning null, nothing.

First let me introduce to you binary numbers. 
Like we count in a logical irregular system, 
jumping from I to V to X to L to C etc., 
primitive peoples count in a decimal system, 
starting with 1, 2, 3, etc. and at the end 10. 
Still another option is to start with 0 for 0, 
I for I, and then I0 for II ! This is even more 
primitive than the system used by the peasants 
but may be useful for a automata. It would go 
on with II for III, I00 for IV, I0I for V, II0 
for VI, III for VII, I000 for VIII, I00I for 
IX, and I0IO for X. And so on and so on.

To correspond to truth values in formulas we can 
now easily use one so-called bit, a 0 or I. Say I 
is true, and 0 is false. We can now use special 
balances and some construction to let formulas 
be evaluated with small round and heavy metal 
bullets. Say we take a balance:
  d p   t       t meaning tick, p for preload
|__|__ |__|     and d for data. ^ is the axis.
     ^
At the p we place a bullet in advance, then at
d we place a bullet, depending on whether a thing 
is true or false. Then we place a bullet at t for 
tick. If a bullet was placed at d, no bullet 
comes out of the hole, else one does. So we made 
a mechanical NOT formula.
  Likewise take the following balance:
  p d1  d2 t     Analog to previous example but
|__|__ |__|__|   now a two data AND formula.
     ^        And:
  p p     d1 d2      t     Would constitute an
|__|__ |_|__|__|____|__|   OR formula over the
        ^                  d1 and d2 inputs.
Now combinations of such balances could be put
between 2 large square wooden planks, connected
with tubes at the proper points. The planks put
parallel and fixed together with the balances
in between, would have a rotating point too, and 
proper paddle-board wheels could transport used 
bullets up again to devices putting the bullets 
in at preload and tick times. After each such 
cycle, the planks would be rotated to get unused 
preload bullets out of the system.

A more complex balance could be EXCLUSIVE XOR:
              d1         d2      
  p    t   __|___ _____ ___|__   t    p 
|__|__|__|__        ^        __|__|__|__| 
     ^                             ^
If we use the normal symbols for logic &, |, ~,
and !, for and, or, exclusive or, and not, we
could make a binary addition IN LOGIC!: If the
inputs are d1 and d2 again (for numbers of 0 or 
I at most) and a remember input is called r: z 
= d1~d2~r, with z the resulting number 0 or I 
for the lowest position in the simple binary
numbered result. Also the highest position, or
remember input to a next section if we want
larger numbers, is simply: rz = d1&d2&r. So a
automata that adds numbers if binary encoded
could be made using above proposed techniques.
However as I did not get much support yet, and
it is hard to collect all the materials and the
suited hill sites, with the paddle-board wheels
and so on. But hoping to still make the automata
on day, I sign here, Qcxxvii.
