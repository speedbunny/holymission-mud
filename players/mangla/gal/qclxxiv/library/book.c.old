string page;
int npages, pageno, opened;
string covertext, color;
int secretpage, secretkey, secretlock;
string openfind;
int open2dest;

get()	{ return 1; }
query_weight() { return 1; }
query_value() { return 1; }

set_openfind(s) {openfind = s; }
set_secretpage(i) { secretpage=i; }
set_secretkey(i) { secretkey=i; }
set_secretlock(i) { secretlock=i; }
set_color(str) { color = str; }
set_covertext(str) { covertext = str; }
set_pages(arrofstr) { 
	page = arrofstr;
	npages = sizeof(arrofstr); 
}
set_open2dest(i) { open2dest = i; }

reset(arg) {
	if (arg) return;
	page = ({ "This is the\nfirst page.\n", "This is the\nsecond page.\n" });
	npages = 2;
	covertext = "U.N.Known - A dummy book.\n";
	color = "red";
	secretpage = -1;
}

id(str) { return str=="book" || str == color+" book" || str == "qlib_book"; }


/*
short() { return "A "+color+" book: "+covertext; }
long() { 
	if (!opened) write("A "+color+" book. On its cover you read:\n"+covertext);
	else write( short()+". It lies open on some page.\n");
}
*/
short() { return "A "+color+" book"; }
long() { 
	if (!opened) write("A "+color+" book. On its cover you read:\n"+covertext);
	else write( short()+". It lies open on some page.\n");
}

init() {
	add_action("read","read");
	add_action("turn","turn");
	add_action("open","open");
	add_action("close","close");
	add_action("exa", "examine");
	add_action("exa", "exa");
	add_action("look", "look");
}

look(arg) {
	if (!opened || arg!="at page") return 0;
	write("A page with some text written on it.\n");
	return 1;
}

exa(arg) {
	if (!opened || arg!="page") return 0;
	write("A page with some text written on it.\n");
	return 1;
}

read(arg) {
	if (!id(arg) && arg!="page") return 0;
	if (!opened) write("The book is closed.\n");
	else if (pageno==secretpage) {
		/* if ....! lock-key-player match */
		if ( "/players/qclxxiv/qquest/qmast"->lock_name2key(secretlock,
					this_player()->query_name()) == secretkey )
			write(page[pageno]);
		else write("The entire page is unreadable to you.\n");
	}
	else write(page[pageno]);
	return 1;
}

turn(arg) {
	if (environment(this_object()) != this_player()) return 0;
	if (arg=="back" || arg=="page back" || arg=="back page") {
		if (pageno==0) 
			write("You reach the cover, and turn back to the first page.\n");
		else {
			pageno--;
			write("You turn to the previous page.\n");
		}
		say(this_player()->query_name()+" pages through a book.\n");
		return 1;
	}
	if (arg=="page" || arg=="page over") {
		if (pageno==npages-1) 
			write("You reach the cover, and turn back to the last page.\n");
		else {
			pageno++;
			write("You turn to the next page.\n");
		}
		say(this_player()->query_name()+" pages through a book.\n");
		return 1;
	}
	return 0;
}

open(arg) {
	object obj;
	if (!id(arg)) return 0;
	if (opened) write("The book is already open.\n");
	else {
		opened=1;
		pageno = 0;
		write("You open the book.\n");
		say(this_player()->query_name()+" opens a book.\n");
		if (openfind) {
			write("something falls out of it.\n");	
			obj = clone_object(openfind);
			openfind = 0;
			if (obj) move_object( obj, environment(this_player()));
		}
		if (open2dest) call_out("self_dest", open2dest);
	}
	return 1;
}

self_dest() {
	write("A book crumbles to dust.\n");
	destruct(this_object());
}

close(arg) {
	if (!id(arg)) return 0;
	if (!opened) write("The book is already closed.\n");
	else {
		opened=0;
		write("You close the book.\n");
		say(this_player()->query_name()+" closes a book.\n");
	}
	return 1;
}
