/* Coded by Arthur mainly for New and Appr wizes on Holy Mission */
/* But, it also saves the hassle for those lazy wizes when they wanna change
somthing on themselves :) - Arthur */
inherit "/obj/treasure";
string let,which,what,name;
int amm,invis;
#define TP this_player
#define QN query_name()
#define CP capitalize
#define WR write
#define TO this_object
#define AA add_action
#define PATH "/players/arthur/wiz/"

reset(arg) {
  if(arg) return;
  name=TP()->query_real_name();
    set_id("wizards rock");
    set_alias("rock");
    set_long("This very sturdy looking rock looks like it was coded by Arthur.\nIt has many neat functions built into it. To find out what\njust type 'help rock'.\n");
    set_value(0);
    set_weight(0);
  }
short() {
    if(invis) return;
    else return capitalize(TP()->query_real_name())+"'s wiz rock";
    }

init() {
/* This next line is commented because it doesn't work with the mages soul */
/*if(!TP()->query_immortal()) { WR("You're not supposed to have me. BYE!\n");destruct(TO()); return 1; } */
   AA("add","add");
   AA("set","set");
   AA("help","help");
   ::init();
}
help(str) {
 if(str != "rock") return 0;
  
  WR("The current functions of Arthurs wiz rock are:\n\n"+
     "Command: set:\n"+
     "str - strength         wis - wisdom         int - intellegence\n"+
     "dex - dexterity        chr - chrisma        con - constitution\n"+
     "   religion                race                   smell\n"+
     "n_ac - natural armour class        n_wc - natural weapons class\n"+
     "al - alignment                    gender - male, female or other\n\n"+
     "Command: add:\n"+
     "hp - add's hit points             money - add's money\n"+
     "                 xp - adds experiance\n");
  return 1;}
      
add(str) {
  if(!TP()->query_immortal()) {
   destruct(this_object());
   return 1;
  }
  if(TP()->query_real_name() != name) {
   WR("This is not your rock, you must seek your own!\n");
   destruct(this_object());
   return 1;}
 if(!str) return 0;
 if(sscanf(str,"%s %d",which,amm)!=2) return 0;

   switch(which) {
         case "money": 
             TP()->add_money(amm);
             done2();
             return 1;
             break;
         case "xp": 
             TP()->add_exp(amm);
             done2();
             return 1;  
             break;
         case "hp":
             TP()->reduce_hit_point(-amm);
             done2();
             return 1;
             break;
         default: return 0; break;
   } 
}

set(str) {
  if(!TP()->query_immortal()) {
    destruct(this_object());
    return 1;
   }
   if(TP()->query_real_name() != name) {
    WR("This is not your wiz rock! Go get your own.\n");
    destruct(this_object());
    return 1;}
  if(!str) {WR("what do you want to set, and to what?\n"); return 1;}
   if(sscanf(str,"%s %s",which,what) == 2) {
      switch(which) {
       case "rock":
             if(what =="invisible") invis = 1;
             else invis = 0;
             done3();
             return 1;
             break;
       case "race":
            TP()->set_race(what);
            done3();
            return 1;
            break;
       case "religion":
            TP()->set_religion(what);
            done3();
            return 1;
            break;
       case "gender":
            if(what =="male") TP()->set_gender(1);
            else if(what =="female") TP()->set_gender(2);
            else TP()->set_gender(0);
            done3();
            return 1;
       case "smell":
             TP()->set_smell(what);
             done3();
             return 1;
            break;
       default:
             break;
      }
   }


   if(sscanf(str,"%s %d",which,amm) !=2) {WR("What do you want set and to what\n");
     return 1;}
     switch(which) {
       case "dex": 
            TP()->set_dex(amm);
            done();
            return 1;
            break;
       case "con":
            TP()->set_con(amm);
            done();
            return 1;
            break;
       case "str":
            TP()->set_str(amm);
            done();
            return 1;
            break;
       case "wis":
            TP()->set_wis(amm);
            done();
            return 1;
            break;
       case "chr": 
            TP()->set_chr(amm);
            done();
            return 1;
            break;
       case "int": 
            TP()->set_int(amm);
            done();
            return 1;
            break;
       case "al":
            TP()->set_al(amm);
            done();
            return 1;
            break;
       case "n_ac":
            TP()->set_n_ac(amm);
            done();
            return 1;
            break;
       case "n_wc":
            TP()->set_n_wc(amm);
            done();
            return 1;
            break;
       default:  
            return 0;
            break;
    }
}
done(){
   WR("I set your "+which+" to: "+amm+".\n");
   log_file("arthur.rock",TP()->query_real_name()+" used the rock to set "+
   which+" to: "+amm+".\n");
   return 1;
}
done2() {
   WR("I added "+amm+" to your "+which+".\n");
   log_file("arthur.rock",TP()->query_real_name()+" used the rock to add "+
   amm+" to "+which+".\n");
   return 1;
}
done3() {
   WR("I Changed "+which+" to: "+what+".\n");
   log_file("arthur.rock",TP()->query_real_name()+" used the rock to change "+
   which+" to "+what+".\n");
   return 1;
}
drop() {WR("You would never want a player to get their grubby hands on your wiz rock!\n");
return 1;}
query_auto_load() { return PATH+"wizrock:";}
