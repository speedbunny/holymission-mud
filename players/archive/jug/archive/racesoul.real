#define ROOM "players/jug/room/"
#define FILENAME "players/jug/obj/racesoul:"

object the_owner, old_room;
string cap_name, race_name, tell_str;
int race_is_seted;

init() {
	object iob;
	
	the_owner = this_player();
	iob = present("race-soul 2", the_owner);
	if (iob) {
		write("You have already a race-soul !!!\n");
		destruct(this_object());
		return 0;
		}
	write ("Now you have a race-soul, type `help race-soul` for hints.\n");
	cap_name = call_other(this_player(), "query_real_name", 0);
	if (!race_is_seted)
		race_name = "norace";
	add_action("race", "race");
	add_action("destruct_soul", "destsoul");
	add_action("tell_race",		"tellrace");
	add_action("go_race_room",	"gorace");
	add_action("ret_race_room", "retrace");
	add_action("help_race_soul","help");
	return 1;
}

init_arg(arg) {
	race_name = arg;
	race_is_seted = 1;
	this_player()->set_race(race_name);
}
	
get() {
    the_owner = this_player();
    cap_name = call_other(this_player(), "query_real_name", 0);
    return 1;
}

drop() { return 1; }

id(str) { return (str == "race-soul") || (str == "racesoul") || (str == "race"); }

long() {
    write("It is transparent.\n");
}

ghost() {
    the_owner = this_player();
    cap_name = call_other(this_player(), "query_real_name", 0);
    return call_other(this_player(), "query_ghost");
}

set_race(str) {
	if (str == "%") {
		write("no race selected !!!");
		destruct(this_object());
		return 0;
		}
	if (str != "human" && str != "elf" && str != "dwarf" &&
		str != "hobbit" && str != "half-elf" && str != "half-orc" &&
		str != "gnome" && str != "?" && str != "help") {
		write("Select your race (? or help for a list of races):");
		input_to("set_race");
		return 1;
		}
	if (str == "?" || str == "help") {
		write("List of available races:\n\thuman\n\telf\n\tdwarf\n\t" +
			  "hobbit\n\thalf-elf\n\thalf-orc\n\tgnome\n\n");
		write("Select your race (? or help for a list of races):");
		input_to("set_race");
		return 1;
		}
	race_name = lower_case(str);
	race_is_seted = 1;
    this_player()->set_race(race_name);
    set_race_stats(race_name);
	return 1;
}

race(str) {
	object ob, iob;
	string other_race;
	
	if (!race_is_seted) {
		set_race();
		return 1;
		}
	
	if (!str) {
		if (race_name != "elf")
			write("You are a " + capitalize(race_name) + ".\n");
		else
			write("You are an " + capitalize(race_name) + ".\n");
		return 1;
		}
	if (str == "all") {
	    write("name\t\trace\n");
	    write("----\t\t----\n");
    	filter_array(users(), "race_filter", this_object());
    	return 1;
    	}
	ob = find_player(lower_case(str));
	if (!ob) {
		write("No player with that name !!!\n");
		return 1;
		}
    if (this_player()->query_level() < 25 &&
        !(ob->short()) && ob->query_level() > 20) {
        write("No player with that name !!!\n");
        return 1;
        }
	if (ob) {
		iob = present("race-soul", ob);
		if (iob) {
			other_race = call_other(iob, "query_race");
			if (other_race != "elf")
				write(capitalize(lower_case(str)) + " is a " +
					  capitalize(other_race) + ".\n");
			else
				write(capitalize(lower_case(str)) + " is an " +
					  capitalize(other_race) + ".\n");
			}
		else
			write(capitalize(lower_case(str)) + " has no race.\n");
		}
	else
		write("No player by that name !!!\n");
		
    return 1;
}

race_filter(ob) {
    object iob;
    string other_race, name;
    
    if (this_player()->query_level() < 25 &&
        !(ob->short()) && ob->query_level() > 20)
        return 1;
	name = call_other(ob, "query_real_name", 0);
	capitalize(name);
	if (strlen(name) < 8)
	    name = name + "\t\t";
	else if (strlen(name) < 12)
	    name = name + "\t";
	iob = present("race-soul", ob);
	if (iob) {
		other_race = call_other(iob, "query_race");
        write(name + capitalize(other_race) + "\n");
        }
	else
		write(name + "no race\n");
    return 1;
}    

destruct_soul() {
	write("As you destruct your race-soul you`ve the feeling\n");
	write("of missing something. Why does you negate your race ?!\n");
	destruct(this_object());
	return 1;
}

tell_race(str) {
	if (!race_is_seted) {
		write("Call first the `race`-command !!!\n");
		return 1;
		}
	tell_str = str;
	if (!str || str == "")
		return 0;
	filter_array(users(), "race_filter_tell", this_object());
	write("You racetells: " + str + "\n");
	return 1;
}

race_filter_tell(ob) {
	object iob;
	
	if (ob == this_player())
		return 0;
    if (this_player()->query_level() < 25 &&
        !(ob->short()) && ob->query_level() > 20)
        return 1;
	iob = present("race-soul", ob);
	if (!iob) return 1;
	if (iob->query_race() == race_name) {
		tell_object(ob, capitalize(this_player()->query_real_name()) +
					" race-shouts: " + tell_str + "\n");
		return 1;
		}
	return 0;
}

go_race_room() {
	string dest;
	int maxsp, sp;
	
	if (!race_is_seted) {
		write("Call first the `race`-command !!!\n");
		return 1;
		}
	if (old_room) {
		write ("You are inside the room of your race.\n");
		return 1;
		}
    maxsp = call_other(this_player(), "query_spell_points");
    sp = (42 + this_player()->query_int() * 8) / 4;
    if (maxsp < sp) {
    	write("To low on spell points.\n");
    	return 1;
    	}
    if (this_player()->query_level() < 21) 
	    call_other(this_player(), "restore_spell_points", -sp);
	dest = "to the race-room#" + ROOM + "race_" + query_race();
	old_room = environment(the_owner);
	if (old_room)
		the_owner->move_player(dest);
	return 1;
}

ret_race_room(flag) {
	string dest;
	
	if (!race_is_seted) {
		write("Call first the `race`-command !!!\n");
		return 1;
		}
	if (!old_room)
		return 0;
	dest = "to the old room#"+ file_name(old_room);
	the_owner->move_player(dest);
	if (!flag)
    	old_room = 0;
	return 1;
}

help_race_soul(arg) {
	if (id(arg)) {
		write("Your own race-soul.\nCommands are:\n");
		write("    help race-soul ... this help message.\n");
		write("    race [name]    ... calling the first time it sets your race,\n");
		write("                       calling else it tells you your or `name` race\n");
		write("                       `all` for all players race.\n");
		write("    tellrace [mes] ... tells all race members the message `mes`.\n");
		write("    gorace         ... teleports you in a special race-room,\n" +
              "                       costs spellpoints depending on level of caster.\n");
		write("    retrace        ... returns you from the race-room.\n");
		write("\nEnjoy this new feature from Jug !!!\n\n");
		return 1;
		}
	return 0;
}

query_race() {
	return race_name;
}

query_race_soul() {
	return 1;
}

int orig_stats()
{
	int s, d, co, i, w, ch;
    object pl;
    
    pl = this_player();
    s = (int) pl->query_str();
    d = (int) pl->query_dex();
    co = (int) pl->query_con();
    i = (int) pl->query_int();
    w = (int) pl->query_wis();
    ch = (int) pl->query_chr();
    
    if (s>1 || d>1 || co>1 || i>1 || w>1 || ch>1)
        return 0;
    
    return 1;
}

set_race_stats(string race)
{
    if (!orig_stats())
        return 0;
        
    switch(race) {
        case "human":
        	this_player()->set_str(2);
			this_player()->set_dex(2);
			this_player()->set_con(2);
			break;
        case "elf":
			this_player()->set_int(2);
			this_player()->set_wis(2);
			this_player()->set_chr(2);
			break;
        case "hobbit":
			this_player()->set_dex(3);
			this_player()->set_con(2);
			break;
        case "dwarf":
        	this_player()->set_str(2);
			this_player()->set_con(3);
			break;
        case "gnome":
			this_player()->set_dex(2);
			this_player()->set_int(2);
			this_player()->set_wis(2);
			break;
        case "half-elf":
        	this_player()->set_str(2);
			this_player()->set_int(2);
			this_player()->set_chr(2);
			break;
        case "half-orc":
        	this_player()->set_str(3);
			this_player()->set_con(2);
			break;
	}
	
	return 1;
}
