This Nutshell allows for command alias, e.g. short commands 
that is expanded by the Nutshell
The commands available for the nutshell are:
alias			- show the list of current aliases
alias command what to do
			- make "command" an alias for the "what to do"
alias command		- remove alias for "command"
do cmd1,cmd2,cmd3,..	- do a series of commands
do			- pauses execution of a series of commands
,cmd1 ,cmd2,cmd3	- do a fast sequence of commands
,,cmd1 ,cmd2,cmd3	- do a short sequence of fast commands even faster
resume			- resume paused commands
help nutshell		- this helptext
help history		- information on history substitution
help Xsyntax		- information on extended syntax
examples:	'alias l look at watch'
		enables you to write l to look at your watch.
		'do smile,look,laugh'
	will first make you smile then look and laugh.
		doing '%%' will then repeat this three commands again

(Error messages that tell you that something
is not found are due to the LP-Mud security system.)
The nutshell maintains a list of executed commands.
Aliases are resolved before registering and subcommands of sequences
won't be stored seperately.
Successing identical commands will be stored only once.

history			- give a list of previous commands
%%			- repeat last command
%n			- repeat command number 'n'
%-n			- repeat command relative to current command
			  ( %-1 is the same as %% )
%string			- repeat last command beginning with string
			  : and \ can be escaped by a leading backslash

The above history substitutions may take one or several modifiers:
	:<		- will add the following text unchanged to the command
	:$		- will replace the referenced command by its last word
	:*		- will replace " by all but the first word

%^<words>		- will do a history substitution on any applicable of
			  the given words and execute the resulting command.
	This will be invoced automatically if the second word begins with '%'.
	If an alias begins with %, %% will be expanded to the current command.
<verb> all from <container> will try to get all from <container> and when
			    the verb isn't 'get' or 'take' , to execute
			    <verb> for each item immediately after it
			     is retrieved from <container>.
<verb> all from outer <container> will get from a container outside you
				  even if you hold one with the same name.
<verb> outer <thing>   - will do <verb> with <thing>
<verb> all my <thing>s - will do <verb> with anything you have that is a <thing>
<verb> all <thing>s from <container>	- will do verb with anything in
					  <container> that is a <thing>.

<verb> can be an arbitrary single word, even an alias.
debug	nutshell	- toggle debugging mode of the nutshell
debug	history
log	nutshell	- toggle logging the catch_tell's
ver	nutshell	- shows version information
loosen	nutshell	- prepare nutshell for drop or give
rename	nutshell <name>
rename	history  <name>
file_size	 <file>	- shows the size of a file
set			- show internal variables
set <variable> <value	snoop_level/snoop_notify_level applies to reading
			alias and history by lower levels.
	patch_level applies to altering the above; 1000000000 means infinity.

The following commands are redefined for all wiz in order to work with
alias / history substitution :
  wizlist * force * heal * update * shutdown * stat * emote * trans * goto
And the following commands are redefined for level >= 21:
  more * echo * echoall * home * ls * cat * clone * destruct * load * tail
cd will apply to a path inside the nutshell as well as the original one in the
player.
For  more * ls * cat * tail  , a leading /. will be inserted;
goto will delete leading /. for the destination room.
The above five commands will allow ~ to designate /./players/ and
~/ to designate /./players/<ownname>/ .
My marker will ask a present nutshell for this syntax and local files
before reporting a failure to mark an objekt with i_mark ob .
