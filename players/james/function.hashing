From news.cis.umn.edu!umn.edu!The-Star.honeywell.com!sol.ctr.columbia.edu!destroyer!uunet!mcsun!sunic!kth.se!lysator.liu.se!pw Sun Nov  1 19:51:18 CST 1992
Article: 3837 of rec.games.mud.lp
Newsgroups: rec.games.mud.lp
Path: news.cis.umn.edu!umn.edu!The-Star.honeywell.com!sol.ctr.columbia.edu!destroyer!uunet!mcsun!sunic!kth.se!lysator.liu.se!pw
From: pw@lysator.liu.se (P{r Winzell)
Subject: Announcement: Function hashing for 3.1.2.
Message-ID: <Bx0Cvz.Eo8@lysator.liu.se>
Summary: How To Make Your Game Stay Up Twice As Long Twice As Fast
Keywords: lpmud,patches
Organization: Lysator Academic Computer Society, Linkoping University, Sweden
Date: Sat, 31 Oct 1992 22:52:39 GMT
Lines: 61

  In my usual role as poster for the wonderful GD-bunnies at Igor...
  Presenting a truly froody thingy; by our most beloved Dark -

------------------------------------------------------------------------------
			FUNCTION HASHING

This patch was developed for Igor (129.16.50.30 1701) and was tested with
Igor's game driver (a 3.1.2 variant) and with Igor's mudlib.
It was ported to 3.1.2, and tested with the 2.4.5 mudlib available from 
alcazar.cd.chalmers.se. It has only been tested in compat-mode. 
It will compile in native mode, but I had no mudlib to test it on.

PART 1: Concept
  This patch combines two effects. Program function tables will be hashed for
faster lookup, and the function table of any program will only contain those
functions actually defined in that program. This means that data on inherited
functions will no longer be copied into an inheriting program. This should
save much memory and increase the game driver's speed.

PART 2: Compatibility effects 
 - It does not fully support 'private inherit'.
 - Whether a call is a simul_efun call is now determined run-time, so it is 
   possible to mask simul-efuns.
 - Only defined functions can be inherited, not loose prototypes.
 - The behaviour in case of function name conflicts (with multiple inheritance)
   has been changed. If an object C inherits A and B (in that order), B can
   mask local function calls in A. An unfortunate side-effect is that private
   or static functions in B can mask public functions in A.
 - You cannot refer to an indirectly inherited program by name.
   I do not know if that was possible without the patch.
 - Functions called with :: now have to be defined when the call is parsed,
   instead of at the end of parsing.

PART 3: Memory effects
 - Not copying inherited functions saves about 16 bytes per inherited function.
   In Igor, that is about 3 Kb per monster file and 800 bytes per room.
 - Even indirectly inherited programs will now have an entry in the inherit
   list. This costs 8 bytes per indirectly inherited program.
 - Local function names will sometimes appear in the 'strings' array.
   This costs about 4 bytes per function called locally.
 - General effects: I estimate a savings of about 25%-30% on program block
   size, and a 10% reduction of overall memory size. In Igor, there was a 50%
   decrease of program block size, and a 20% reduction of overall memory size.

PART 4: Speed effects 
 - apply() is now far, far faster. I expect at least a tenfold speed increase.
 - local calls are slower, probably about five or tenfold.
 - parsing is a bit faster -- about 10%
 - General effects: There are about as many external calls as local calls,
   so I expect an overall speed increase. I could not measure it exactly.

						Dark

You can contact me by mailing to 'dark' at Igormud (129.16.50.30 1701) or
by email at richard@cs.rug.nl.

P.S. Many thanks to Zellski for saying 'hashing' at exactly the right time :)
     Thanks to Dworkin for helping me to decide whether to hash or to sort.
     More thanks to Zellski for helping me with some design decisions.

PPS by Zell: Dark is much too modest. The overall speed is *much* increased.


From news.cis.umn.edu!umn.edu!spool.mu.edu!uunet!decwrl!netcomsv!netcom.com!urimud Sun Nov  1 19:52:15 CST 1992
Article: 3846 of rec.games.mud.lp
Newsgroups: rec.games.mud.lp
Path: news.cis.umn.edu!umn.edu!spool.mu.edu!uunet!decwrl!netcomsv!netcom.com!urimud
From: urimud@netcom.com (James M. McKenzie)
Subject: Re: Announcement: Function hashing for 3.1.2.
Message-ID: <1992Nov1.052203.19412@netcom.com>
Organization: Netcom - Online Communication Services  (408 241-9760 guest) 
References: <Bx0Cvz.Eo8@lysator.liu.se>
Date: Sun, 1 Nov 1992 05:22:03 GMT
Lines: 18

 Hasing the functions, about time someone did that to the slow lp's.
 Makes a difference doesn't it?

 Urimud an lp look-alike you might say, has this, plus we hashed the
 verb tables too.  Maintain a separt link list for resetable objects,
 not containing objects that don't get 'reset'.  This helps performance
 AT reset.

 Indirectly inherited object can be called direclty, private inheriting
 is suported fully.

 Also we do not suffer from the giant SWITCH in the lp's all functions
 have been converted to function pointers, another performance getter,
 it also helps when you are debuging new features you've added to the parser.

 Hm I could go on, but I doubt I've got the time right now.

     Man-ing  - Creator of Uri -


From news.cis.umn.edu!umn.edu!spool.mu.edu!uwm.edu!daffy!cs.wisc.edu!austin Sun Nov  1 19:53:12 CST 1992
Article: 3850 of rec.games.mud.lp
Newsgroups: rec.games.mud.lp
Path: news.cis.umn.edu!umn.edu!spool.mu.edu!uwm.edu!daffy!cs.wisc.edu!austin
From: austin@cs.wisc.edu (Klaas)
Subject: Re: Announcement: Function hashing for 3.1.2. (now: switch enhancements)
Message-ID: <1992Nov1.183439.26234@daffy.cs.wisc.edu>
Sender: austin@cs.wisc.edu (Todd Austin)
Organization: U of Wisconsin CS Dept
References: <Bx0Cvz.Eo8@lysator.liu.se> <1992Nov1.052203.19412@netcom.com>
Date: Sun, 1 Nov 1992 18:34:39 GMT
Lines: 109

In article <1992Nov1.052203.19412@netcom.com>, urimud@netcom.com (James M. McKenzie) writes:
|> 
|>  Also we do not suffer from the giant SWITCH in the lp's all functions
|>  have been converted to function pointers, another performance getter,
|>  it also helps when you are debuging new features you've added to the parser.
|> 
|>  Hm I could go on, but I doubt I've got the time right now.
|> 
|>      Man-ing  - Creator of Uri -

Well, if you have a good compiler, and your switch case values are reasonably
sequential (like in the lp GD) then it is probably better to leave the switch
statement in.  This is because a good compiler will convert the switch statement
to a jump table, while the use of function pointers will incur a procedure call
on EACH GD instruction.  Yeah, its only a few extra instructions, but I think
we would all agree that this is a few instructions on the GD's most critical
path (read: Amdahl's Law.)

Of course, if you have a lame compiler that can't do this optimization, then
the function call table is MUCH better.  Here's a dispatch coding style that
should appease all: (is there anyway to express a true jump table in 'C'??)

----------------------------- tableORswitch.c --------------------------------
#ifdef LAME_COMPILER
#define FN_TABLE
#else /* !LAME_COMPILER */
#undef FN_TABLE
#endif /* LAME_COMPILER */

#define CASE1	1
#define CASE2	2
#define CASE3	3
#define CASE4	4

#define FIRST_CASE	CASE1
#define LAST_CASE	CASE4

#ifdef FN_TABLE
extern void (*(fn_table[]))();
#define DISPATCH(c)	if (c<FIRST_CASE || c>LAST_CASE) \
                            default_fn(); \
                        else \
                            (*(fn_table[c]))(); }
#define END_DISPATCH
#define CASE(n)		void fn_/**/n() {
#define DEFAULT_CASE	void fn_default() {
#define BREAK		return
#define ENDCASE		}
#else /* !FN_TABLE */
#define DISPATCH(c)	switch (c) {
#define END_DISPATCH	} }
#define CASE(n)		case n:
#define DEFAULT_CASE	default:
#define BREAK		break
#define ENDCASE
#endif /* FN_TABLE */


foo(int c)
{

    /* put any preparatory code here... */

DISPATCH(c)

 CASE(CASE1)
     /* CASE1 code */
     BREAK;
 ENDCASE
 CASE(CASE2)
     /* CASE2 code */
     BREAK;
 ENDCASE
 CASE(CASE3)
     /* CASE3 code */
     BREAK;
 ENDCASE
 CASE(CASE4)
     /* CASE4 code */
     BREAK;
 ENDCASE
 DEFAULT_CASE
     /* default code */
     BREAK;
 ENDCASE

END_DISPATCH

#ifdef FN_TABLE
void (*(fn_table[]))() = {
    fn_CASE1,
    fn_CASE2,
    fn_CASE3,
    fn_CASE4
};
#endif /* FN_TABLE */

------------------------------------------------------------------------

Pretty scary, huh, most appropriate near Halloween!

Enjoy!
Todd Austin, Klaas @ {RUD, LPSwat}

P.S. Is anyone up on the optimizations done on the SOAR (Smalltalk On A
RISC) project?  Unger, I believe, did his Ph.D. thesis on optimizing
execution speed of a dynamically bound language.  It was pretty successful,
and the thesis won an award from the ACM, so its in most CS libraries. 
Maybe there are ideas there that could be employed here.


From news.cis.umn.edu!umn.edu!csus.edu!netcom.com!urimud Sun Nov  1 19:53:40 CST 1992
Article: 3856 of rec.games.mud.lp
Newsgroups: rec.games.mud.lp
Path: news.cis.umn.edu!umn.edu!csus.edu!netcom.com!urimud
From: urimud@netcom.com (James M. McKenzie)
Subject: Re: Announcement: Function hashing for 3.1.2. (now: switch enhancements)
Message-ID: <1992Nov1.233125.5996@netcom.com>
Organization: Netcom - Online Communication Services  (408 241-9760 guest) 
References: <1992Nov1.183439.26234@daffy.cs.wisc.edu>
Date: Sun, 1 Nov 1992 23:31:25 GMT

austin@cs.wisc.edu (Klaas) writes:
: In article <1992Nov1.052203.19412@netcom.com>, urimud@netcom.com (James M. McKenzie) writes:
: |> 
: |>  Also we do not suffer from the giant SWITCH in the lp's all functions
: |>  have been converted to function pointers, another performance getter,
: |>  it also helps when you are debuging new features you've added to the parser.
: |> 
: |>  Hm I could go on, but I doubt I've got the time right now.
: |> 
: |>      Man-ing  - Creator of Uri -
: 
: Well, if you have a good compiler, and your switch case values are reasonably
: sequential (like in the lp GD) then it is probably better to leave the switch
: statement in.  This is because a good compiler will convert the switch statement
: to a jump table, while the use of function pointers will incur a procedure call
: on EACH GD instruction.  Yeah, its only a few extra instructions, but I think
: we would all agree that this is a few instructions on the GD's most critical
: path (read: Amdahl's Law.)
: 
: Of course, if you have a lame compiler that can't do this optimization, then
: the function call table is MUCH better.  Here's a dispatch coding style that
: should appease all: (is there anyway to express a true jump table in 'C'??)
: 

  Well I wont argue the point with you, but the conversion made a segnifcant
  increase in speed.  Even with full optimization durring compile.

  It seems to me to call f_if() directly is much faster then FINDING it first,
  then executing the code,  and in some of the lp's I've seen have a double
  switch.

    Man-ing  - Creator of Uri -



From news.cis.umn.edu!umn.edu!math.fu-berlin.de!unidui!Germany.EU.net!news.Hamburg.Germany.EU.net!amylaar Sun Nov  1 19:54:39 CST 1992
Article: 3857 of rec.games.mud.lp
Newsgroups: rec.games.mud.lp
Path: news.cis.umn.edu!umn.edu!math.fu-berlin.de!unidui!Germany.EU.net!news.Hamburg.Germany.EU.net!amylaar
From: amylaar@mcshh.Hanse.DE (Joern Rennecke)
Subject: Re: Announcement: Function hashing for 3.1.2. (now: switch enhancements)
Organization: Point of Presence & MCS Hamburg
Date: Sun, 1 Nov 1992 23:45:04 GMT
Message-ID: <amylaar.720661504@mcshh.hanse.de>
References: <Bx0Cvz.Eo8@lysator.liu.se> <1992Nov1.052203.19412@netcom.com> <1992Nov1.183439.26234@daffy.cs.wisc.edu>
Sender: news@mcshh.Hanse.DE (News Administrator)
Lines: 21

austin@cs.wisc.edu (Klaas) writes:

...
>#define CASE(n)		void fn_/**/n() {
...

This way of token pasting is not portable; it is in conflict to the ansi
standard ( although it works with some compilers that claim to be ansi.... ).
The only way to do such things portable is to write your own preprocessor.
Moreover, when you support function tables, you can't do some very precious
optimizations, like using local variables, goto or return from
eval_instruction.
If your compiler won't use a jump table when a switch uses 220 out of 220
codes, it will probably do other things inefficient as well. The first step
towards a faster lpmud is then probablto replace the compiler with a better
one.
Note also that yacc uses to generate huge switch statements as well, and
it would cost quite a lot effort to tweak the yacc output to fit your
function table/switch concept.

	Amylaar


From news.cis.umn.edu!umn.edu!math.fu-berlin.de!unidui!Germany.EU.net!news.Hamburg.Germany.EU.net!amylaar Sun Nov  1 19:55:26 CST 1992
Article: 3858 of rec.games.mud.lp
Newsgroups: rec.games.mud.lp
Path: news.cis.umn.edu!umn.edu!math.fu-berlin.de!unidui!Germany.EU.net!news.Hamburg.Germany.EU.net!amylaar
From: amylaar@mcshh.Hanse.DE (Joern Rennecke)
Subject: Re: Announcement: Function hashing for 3.1.2.
Organization: Point of Presence & MCS Hamburg
Date: Mon, 2 Nov 1992 00:00:07 GMT
Message-ID: <amylaar.720662407@mcshh.hanse.de>
References: <Bx0Cvz.Eo8@lysator.liu.se> <1992Nov1.052203.19412@netcom.com>
Sender: news@mcshh.Hanse.DE (News Administrator)
Lines: 22

urimud@netcom.com (James M. McKenzie) writes:

> Hasing the functions, about time someone did that to the slow lp's.
> Makes a difference doesn't it?

> Urimud an lp look-alike you might say, has this, plus we hashed the
> verb tables too.  Maintain a separt link list for resetable objects,

Not a good move. remove_sent() is more of a performance problem than
searching the verbs. add_action() should probably be used less often.

> not containing objects that don't get 'reset'.  This helps performance
> AT reset.

Hmmm, using 4 extra bytes for each object ?

> Indirectly inherited object can be called direclty, private inheriting
> is suported fully.

Have you also retained & debugged the virtual functions ?

	Amylaar


From news.cis.umn.edu!umn.edu!The-Star.honeywell.com!sol.ctr.columbia.edu!caen!uunet!mcsun!sunic!kth.se!lysator.liu.se!pw Sun Nov  1 19:55:53 CST 1992
Article: 3838 of rec.games.mud.lp
Newsgroups: rec.games.mud.lp
Path: news.cis.umn.edu!umn.edu!The-Star.honeywell.com!sol.ctr.columbia.edu!caen!uunet!mcsun!sunic!kth.se!lysator.liu.se!pw
From: pw@lysator.liu.se (P{r Winzell)
Subject: *cough* FTP site for other posting...
Message-ID: <Bx0D8H.ExH@lysator.liu.se>
Organization: Lysator Academic Computer Society, Linkoping University, Sweden
Date: Sat, 31 Oct 1992 23:00:02 GMT
Lines: 7

  Right, so, well. You get the amazing fantastic diffs for the function
hashing at that ol' beloved site :

  ftp.lysator.liu.se  -- pub/lpmud/servers/3.1.2.funhash.tar.Z

  // Z.



