
/* ############################################################   
   #                                                          #
   #         The mages soul. It's the mage robe too.          #
   #    (most functions are called via the magemaster!!)      #
   #                                                          #
   ###############################################(C) Llort#### */

inherit "obj/armour";

#define E		environment
#define MS		"players/llort/guild/magemaster"
#define MED_TITLE 	" is sitting in the lotus position"
#define CHAINTIME	60	/* used in dec_sp for invisible */

int fattack;		/* if true no attack spell */
int meditate;		/* true if meditating */
string spells;		/* the actual spells I have */
object go_mark;		/* the room we left at the last goguild */
string nametmp,timetmp, /* temporary variables for the illusion spell */
       shorttmp,longtmp;
string nextarg,nextverb;/* this is for timing the spells */
object nextpl; 		/* ----- || ----- */
/* only for the additional possess 
#include "spells/possess.c"
*/

drop() { 
  tell_object(E(),"Do you want to get rid of your robe?\n");
  tell_object(E(),"Sorry, you have to leave the guild for that.\n");
  return 1; 
}

reset(arg) {
  ::reset(arg);
  if (arg) return;
  set_id("mage robe"); 
  set_alias(MS->query_id());
  set_short("mage robe");
  set_long("A beautiful decorated magerobe.\n");
  set_value(0);
  set_weight(1);
  set_ac(1);
  set_type("robe"); 
  spells=allocate(0);
  enable_commands();
  set_heart_beat(1);

  spells=MS->query_spells();
}

heart_beat(e) {
  if(meditate) {
    E()->stop_fight();
    E()->stop_fight();
    E()->stop_hunter(1);
/*
    tell_object(E(),"Regenerating  HP: "+E()->query_hp()+"  SP: "+
	  E()->query_spell_points()+"...\n");
*/
  }
  fattack=0; 
} 

init() {
int i; 

  ::init();
  init_spells();

  add_action("help","help");
  add_action("check","check");
  if(E()->query_wizard()) {
    add_action("wake_up","wake_up");
/*    add_action("possess","possess");
    add_action("release","release");
*/
  }
}

init_spells() {
  string update_spells;
  int i;

  add_action("no_std_spells","missile");
  add_action("no_std_spells","shock");
  add_action("no_std_spells","fireball");

  update_spells=allocate(0);
  for(i=0;i<sizeof(spells);i++) {
    if(set_spell(spells[i])) {
      update_spells+=({ spells[i] });
    } else write("!! Spell "+spells[i]+" is no longer available !!\n");
  }
  spells=update_spells;
}  

no_std_spells() { 
  tell_object(E(),"What ??\n");
  return 1;
}

extra_look() {
  if(meditate) return capitalize(E()->query_pronoun())+MED_TITLE;
}

check(arg) {
  return MS->check(arg,E());
}

help(arg) {
  return MS->help(arg,E());
}

do_spell(arg) {
  if(nextpl) {
    write("You are already conzentrating on another spell.\n");
    return 1;
  }
  if(MS->query_attack_spell()) {
    nextpl=E();
    nextarg=arg; 
    nextverb=query_verb();
    return 1;
  } else return MS->do_spell(arg,E());
}

time_guild_soul() {
  int ret;
  if(!nextpl) return;
  ret=MS->do_spell(nextarg,nextpl,nextverb);
  nextpl=nextarg=nextverb=0;
  return ret;
}

/* whats to do if the hold spell i casted ends */
hold_end(ob) {
  return;
}

refresh_invis(cost) {
  remove_call_out("dec_sp");
  call_out("dec_sp",CHAINTIME,cost);
}

dec_sp(cost) {
  if(E()->query_spell_points()<cost) return command("visible",E());
  E()->restore_spell_points(-cost);
  call_out("dec_sp",CHAINTIME,cost);
  return 1;
}

end_invis() {
  remove_call_out("dec_sp");
}

/* ########	the input comes here if the mage is meditating 	######## */

nil(arg) { 
string tmp;
  if(arg) {
    sscanf(arg,"whisper %s",tmp); 
    if(tmp) {
      input_to("nil");
      command(arg,E());
      return;
    }
    if(meditate) {
      input_to("nil");
      switch(arg) {
        case "who":
        case "look":
        case "l":
        case "score":
        case "i": 
        case "wake_up":
        case "hp":
           command(arg,E());
           break;
        default:
           write("You can't do that while meditating.\n");
      }
      return;
    }
    command(arg,E());
  }
}

/* #########	end meditation	   ######### */

end_meditate() {
  tell_room(E(E()),E()->query_name()+" awakes and raises. "+
     capitalize(this_player()->query_pronoun())+" looks refreshed.\n");
  meditate=0;
}

shield_call_out(tim) {
  call_out("end_shield",tim);
}

/* ###########	end shield 	########## */

end_shield() {

  if(armour_class()==1) {
    write("There is no shield spell active.\n");
    return 1;
  }

  set_ac(1);
  if(query_worn()) {
    E()->recalc_ac();
    tell_room(E(E()),E()->query_name()+"'s aura is gone.\n");  
  }
  return 1;
}

/* ## most of the illusion spell has to be in here becouse of the input_to ## */

start_illusion(name,time) {
  nametmp=name;
  timetmp=time;
  input_to("get_short");
}

/* ######	get short description for the illusion   	###### */

get_short(str) {
  shorttmp=str;
  write("Enter the exact description of your illusion: (end with **)\n>>");
  longtmp=0;
  input_to("get_long");
}

/* #######	get long description for the illusion 		##### */

get_long(str) {
  if(str=="**") { 
    set_ill();
    return;
  }
  if(!str) {if(longtmp) longtmp+="\n"; else longtmp="\n";}
  else {if(longtmp) longtmp+=(str+"\n"); else longtmp=str+"\n";}
  write(">>");
  input_to("get_long");
}

set_ill() {
object ob;

  ob=clone_object("players/llort/guild/obj/illusion");
  move_object(ob,E(E()));
  ob->set_name("illusion");
  ob->set_alias(nametmp);
  ob->set_short(shorttmp);
  ob->set_long(longtmp);
  ob->start(timetmp);
  tell_room(E(E()),"Something in the area has changed.\n");
}

set_spell(arg) {
  if(MS->chk_spell(arg)) add_action("do_spell",arg);
  else return 0;
  return 1;
}

set_fattack() { fattack=1; }

set_go_mark(m) { go_mark=m; }

set_meditate(m) { meditate=m; }

query_mage_wear() { return 1; }

query_fattack() { return fattack; }

query_meditate() { return meditate; }

query_spells() { return spells; }

query_go_mark() { return go_mark; }


