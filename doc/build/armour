To get an armour do:
    object aobj;

    aobj = clone_object("obj/armour");

For customization the following routines are available :

You must call these functions (use call_other()):

set_name(n) 
    string n. Sets the name and short description to n.
    Sets long description to short + ".\n"

These are the optional functions:

set_short(s) 
    string s. Sets the short description to s and the long to short + ".\n"

set_long(l)
    string l. Sets the long description to l.

set_value(v) 
    int v. Sets the selling value to v.

set_weight(w) 
    int w. Sets the weight to w.

set_ac(a) { ac = a; }
    int a. Sets the armour class to a. A random value up to 'a' is subtracted
    from the hit.

set_alias(a) { alias = a; }
    string a. Sets an alias name if armour.

set_type(t) { type = t };
    string t. Sets the type of armour to t. Only one of every type can be worn.
    These are the types you can use: helmet, amulet, armour, shield, ring, 
    glove, cloak and boot. 
	You can set an arbitrary name but we strongly suggest that you only 
    use these. Default is armour. The armour class of every worn armour is added
    together.

set_arm_light(l) 
    int l. Makes the armour shine like a lamp of strenght l.

set_size(s)
    int s. Give the armour its size.
    0: any (for every size)
    1: small, 2: medium, 3: large, 4:x-large (*grin*)

EXTRA FUNCTIONS:

1.) mixed wear_fun(object player)
2.) mixed remove_fun(object player)

This two functions can be called extra in your armour. They are called
everytime the armour is worn or removed.

EXAMPLE:

inherit "/obj/armour";

void reset(int flag)
{
     ::reset(flag);
     if (flag == 0)
     {
        set_name("earrings");
        set_alias("jeweled earrings");
        set_short("jeweled earrings");
        set_long("Pretty jeweled earrings.\n");
        set_ac(0);
        set_size(0);       
        set_type("ear");
        set_weight(1);
        set_value(1000);
     }
}

int wear_fun(object player)
{
      tell_object(player,"You feel much prettier now !\n");
      return 1;
}

int remove_fun(object player)
{
      tell_object(player,"Ohh, gosh they suited you so well.\n");
      return 1;
}

ps: That the functions are mixed means they can return any type.
    What types and max armourclasses are allowed can be seen in
    the rules and under /obj/share.c

    Please be careful, and make good armour really hard to get :*)

        


